(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{408:function(t,a,n){"use strict";n.r(a);var s=n(9),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"实现原理"}},[t._v("实现原理")]),t._v(" "),n("p",[t._v("js 的原生方法被覆盖掉以后，如果你还没让原生方法又从新指向一个新的变量名，那就 gg 了。所以，关键就是怎么再获取到原生的方法。实现的原理就是创建一个新的 window 对象，然后从新的 window 对象里面获取原生的方法，来重新赋值。")]),t._v(" "),n("h2",{attrs:{id:"使用-iframe-实现"}},[t._v("使用 iframe 实现")]),t._v(" "),n("p",[t._v("首先创建一个 iframe 对象，使用 document.createElement 方法创建")]),t._v(" "),n("p",[t._v('var iframe = document.createElement("iframe"); document.body.appendChild(iframe)\n然后，获取到 iframe 里面的 window 对象')]),t._v(" "),n("div",{staticClass:"language-JavaScript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("var iframeWin = iframe.contentWindow;")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("window.console = iframeWin.console;")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),n("h2",{attrs:{id:"使用-window-open-方法实现"}},[t._v("使用 window.open 方法实现")]),t._v(" "),n("p",[t._v("window.open 方法调用会打开一个新的窗口，返回一个新的 window 对象，所以我们获取 window 对象可以这样获取")]),t._v(" "),n("div",{staticClass:"language-JavaScript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" win "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取对象")]),t._v("\nwin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将打开的窗口关闭")]),t._v("\nwindow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("console "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" win"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);