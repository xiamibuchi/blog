(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{403:function(a,t,s){"use strict";s.r(t);var e=s(9),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"正则表达式-regexp"}},[a._v("正则表达式(RegExp)")]),a._v(" "),s("h3",{attrs:{id:"正则表达式"}},[a._v("正则表达式")]),a._v(" "),s("h3",{attrs:{id:"regexp-构造函数"}},[a._v("RegExp 构造函数")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。")]),a._v(" "),s("ol",[s("li",[s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("regExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'xyz'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'i'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//等价于")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/xyz/i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])])])]),a._v(" "),s("li",[s("p",[a._v("参数是一个正则表达式，这时会返回一个原有正则表达式的拷贝。")]),a._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/xyz/i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 等价于")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/xyz/i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。")]),a._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/xyz/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'i'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another")]),a._v("\n")])])]),s("p",[a._v("ES6 改变了这种行为。如果"),s("code",[a._v("RegExp")]),a._v("构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("new RegExp(/abc/ig, 'i').flags\n// \"i\"\n\n")])])]),s("p",[a._v("上面代码中，原有正则对象的修饰符是"),s("code",[a._v("ig")]),a._v("，它会被第二个参数"),s("code",[a._v("i")]),a._v("覆盖。")])])]),a._v(" "),s("h2",{attrs:{id:"正则是啥？"}},[a._v("正则是啥？")]),a._v(" "),s("p",[a._v('正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为"元字符"）。')]),a._v(" "),s("h2",{attrs:{id:"元字符"}},[a._v("元字符")]),a._v(" "),s("p",[a._v("\\是转移字符，其后面的字符会代表不同的意思，转移字符主要有三个作用：")]),a._v(" "),s("p",[a._v("第一种，是为了匹配不方便显示的特殊字符，比如换行，tab符号等")]),a._v(" "),s("p",[a._v("第二种，正则中预先定义了一些代表特殊意义的字符，比如\\w等")]),a._v(" "),s("p",[a._v("第三种，在正则中某些字符有特殊含义(比如下面说到的)，转义字符可以让其显示自身的含义")]),a._v(" "),s("p",[a._v("下面是常用转义字符列表：")]),a._v(" "),s("h3",{attrs:{id:"常见元字符"}},[a._v("常见元字符")]),a._v(" "),s("ul",[s("li",[a._v("\\d   匹配数字（0~9） '\\d'匹配8,不匹配12")]),a._v(" "),s("li",[a._v("\\D   匹配非数字 '\\D'匹配c,不匹配3")]),a._v(" "),s("li",[a._v("\\w   匹配一个字母或数字 '\\w\\w' 匹配A3,不匹配@3")]),a._v(" "),s("li",[a._v("\\W   匹配非单词字符 '\\W'匹配@,不匹配c")]),a._v(" "),s("li",[a._v("\\s   匹配空白字符 '\\d\\s\\d'匹配3 d,不匹配abc")]),a._v(" "),s("li",[a._v("\\S   匹配非空字符 '\\S\\S\\S'匹配A#4,不匹配3 d")]),a._v(" "),s("li",[a._v("\\b   匹配单词边界")]),a._v(" "),s("li",[a._v("\\B   匹配非单词边界")]),a._v(" "),s("li",[a._v("\\n   匹配换行符")]),a._v(" "),s("li",[a._v("\\r   匹配回车符")]),a._v(" "),s("li",[a._v("\\t   匹配制表符(tab)")]),a._v(" "),s("li",[a._v(".    匹配任意字符")]),a._v(" "),s("li",[a._v("|    表示'或'")]),a._v(" "),s("li",[a._v("()   优先级最低，表示分组")])]),a._v(" "),s("h3",{attrs:{id:"字符类元字符"}},[a._v("字符类元字符")]),a._v(" "),s("ul",[s("li",[a._v("^    表示匹配必须由起始开始")]),a._v(" "),s("li",[a._v("$    表示匹配必须由末尾结束")]),a._v(" "),s("li",[a._v("[]   表达字符的位置，里面是可能出现的字符\n"),s("ul",[s("li",[a._v("[^]  是非的意思")]),a._v(" "),s("li",[a._v("[a-z][1-9]表示范围")])])])]),a._v(" "),s("h3",{attrs:{id:"量词类元字符"}},[a._v("量词类元字符")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("*")]),a._v("表示能够出现0次或者更多次，x>=0;")]),a._v(" "),s("li",[s("code",[a._v("+")]),a._v("表示能够出现1次或者多次，x>=1")]),a._v(" "),s("li",[s("code",[a._v("?")]),a._v("表示能够出现0次或者1次，x=0或者x=1")]),a._v(" "),s("li",[s("code",[a._v("{n}")]),a._v("表示能够出现n次")]),a._v(" "),s("li",[s("code",[a._v("{n,}")]),a._v("表示能够出现n次或者n次以上")]),a._v(" "),s("li",[s("code",[a._v("{n,m}")]),a._v("表示能够出现n-m次")])]),a._v(" "),s("p",[a._v("来看一个复杂的例子：\\d{3}\\s+\\d{3,8}。我们来从左到右解读一下：")]),a._v(" "),s("ul",[s("li",[a._v("\\d{3}表示匹配3个数字，例如'010'；")]),a._v(" "),s("li",[a._v("\\s可以匹配一个空格（也包括Tab等空白符），所以\\s+表示至少有一个空格，例如匹配' '，'\\t\\t'等；")]),a._v(" "),s("li",[a._v("\\d{3,8}表示3-8个数字，例如'1234567'。")])]),a._v(" "),s("p",[a._v("要做更精确地匹配，可以用"),s("code",[a._v("[]")]),a._v("表示范围，比如：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("[0-9a-zA-Z\\_]")]),a._v("：匹配一个数字、字母或者下划线；")]),a._v(" "),s("li",[s("code",[a._v("[0-9a-zA-Z\\_]+")]),a._v("：匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'js2015'等等；")]),a._v(" "),s("li",[s("code",[a._v("[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]+")]),a._v("：匹配由字母或下划线、$开头，后接任意个由一个数字、字母或者下划线、$组成的字符串")]),a._v(" "),s("li",[s("code",[a._v("[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]{0, 19}")]),a._v("：精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。")]),a._v(" "),s("li",[s("code",[a._v("A|B")]),a._v("：可以匹配A或B")]),a._v(" "),s("li",[s("code",[a._v("^")]),a._v("：行的开头，"),s("code",[a._v("^\\d")]),a._v("表示必须以数字开头。")]),a._v(" "),s("li",[s("code",[a._v("$")]),a._v("：表示行的结束，"),s("code",[a._v("\\d$")]),a._v("表示必须以数字结束。")])]),a._v(" "),s("h3",{attrs:{id:"javascript中的regexp"}},[a._v("JavaScript中的RegExp")]),a._v(" "),s("p",[a._v("JavaScript有两种方式创建一个正则表达式：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("/正则表达式/")])]),a._v(" "),s("li",[s("code",[a._v("new RegExp('正则表达式')")])])]),a._v(" "),s("p",[a._v("注意："),s("code",[a._v("new RegExp")]),a._v("方法中的“正则表达式”需要注意字符串的转义，如：")]),a._v(" "),s("p",[s("code",[a._v("/ABC\\-001/")]),a._v("和"),s("code",[a._v("new RegExp('ABC\\\\-001')")]),a._v("实际上是相同的")]),a._v(" "),s("p",[a._v("RegExp对象的test()方法用于测试给定的字符串是否符合条件：")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" re "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/^\\d{3}\\-\\d{3,8}$/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'010-12345'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'010-1234x'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// false")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'010 12345'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// false")]),a._v("\n")])])]),s("h4",{attrs:{id:"切分字符串"}},[a._v("切分字符串")]),a._v(" "),s("p",[s("code",[a._v("split()")]),a._v("方法：把一个字符串分割成字符串数组。")]),a._v(" "),s("p",[s("code",[a._v("stringObject.split(separator,howmany)")])]),a._v(" "),s("p",[a._v("separator：必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。")]),a._v(" "),s("p",[a._v("howmany：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。")]),a._v(" "),s("p",[a._v('注：如果把空字符串 ("") 用作 +separator+，那么 stringObject 中的每个字符之间都会被分割。')]),a._v(" "),s("h4",{attrs:{id:"分组"}},[a._v("分组")]),a._v(" "),s("p",[s("code",[a._v("exec()")]),a._v(" 方法：检索字符串中的正则表达式的匹配。或者在没有匹配项的情况下返回 null。返回的数组虽然是 Array 的实例，但包含两个额外的属性：index 和 input。其中，index 表示匹配项在字符串中的位置，而 input 表示应用正则表达式的字符串。")]),a._v(" "),s("p",[s("code",[a._v("RegExpObject.exec(string)")])]),a._v(" "),s("p",[a._v("如果 "),s("code",[a._v("exec()")]),a._v(" 找到了匹配的文本，会返回一个Array，第一个元素始终是原始字符串本身，后面的字符串表示匹配成功的子串。。否则，返回 null。如：")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" re "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/^(\\d{3})-(\\d{3,8})$/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'010-12345'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ['010-12345', '010', '12345']")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'010 12345'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// null")]),a._v("\n")])])]),s("h4",{attrs:{id:"贪婪匹配"}},[a._v("贪婪匹配")]),a._v(" "),s("p",[a._v("正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。如：")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" re "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/^(\\d+)(0+)$/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'102300'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ['102300', '102300', '']")]),a._v("\n")])])]),s("p",[a._v("由于"),s("code",[a._v("\\d+")]),a._v("采用贪婪匹配，直接把后面的0全部匹配了，结果0+只能匹配空字符串了。")]),a._v(" "),s("p",[a._v("必须让"),s("code",[a._v("\\d+")]),a._v("采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\\d+采用非贪婪匹配：")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" re "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/^(\\d+?)(0+)$/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'102300'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ['102300', '1023', '00']")]),a._v("\n")])])]),s("h4",{attrs:{id:"全局搜索"}},[a._v("全局搜索")]),a._v(" "),s("p",[a._v("JavaScript的正则表达式还有几个特殊的标志，最常用的是g，表示全局匹配：")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" r1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/test/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 等价于:")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" r2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'test'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'g'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("全局匹配可以多次执行exec()方法来搜索一个匹配的字符串。当我们指定g标志后，每次运行exec()，正则表达式本身会更新lastIndex属性，表示上次匹配到的最后索引：")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'JavaScript, VBScript, JScript and ECMAScript'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" re"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/[a-zA-Z]+Script/g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 使用全局匹配:")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ['JavaScript']")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 10")]),a._v("\n\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ['VBScript']")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 20")]),a._v("\n\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ['JScript']")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 29")]),a._v("\n\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ['ECMAScript']")]),a._v("\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 44")]),a._v("\n\nre"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// null，直到结束仍没有匹配到")]),a._v("\n")])])]),s("p",[a._v("全局匹配类似搜索，因此不能使用"),s("code",[a._v("/^...$/")]),a._v("，那样只会最多匹配一次。")]),a._v(" "),s("p",[s("em",[a._v("正则表达式还可以指定"),s("code",[a._v("i")]),a._v("标志，表示忽略大小写，"),s("code",[a._v("m")]),a._v("标志，表示执行多行匹配。")])]),a._v(" "),s("h2",{attrs:{id:"字符集和"}},[a._v("字符集和")]),a._v(" "),s("p",[a._v("有时我们需要匹配一类字符，字符集可以实现这个功能，字符集的语法用[]分隔，下面的代码能够匹配a或b或c")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[abc]\n")])])]),s("p",[a._v("如果要表示字符很多，可以使用-表示一个范围内的字符，下面两个功能相同")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[0123456789]\n[0-9]\n")])])]),s("p",[a._v("在前面添加^，可表示非的意思，下面的代码能够匹配abc之外的任意字符")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("[^abc]\n")])])]),s("p",[a._v("其实正则还内置了一些字符集，在上面的转义字符有提到，下面给出内置字符集对应的自定义字符集")]),a._v(" "),s("ul",[s("li",[a._v(". 匹配除了换行符（\\n）以外的任意一个字符 = [^\\n]")]),a._v(" "),s("li",[a._v("\\w = [0-9a-Z_]")]),a._v(" "),s("li",[a._v("\\W = [^0-9a-Z_]")]),a._v(" "),s("li",[a._v("\\s = [ \\t\\n\\v]")]),a._v(" "),s("li",[a._v("\\S = [^ \\t\\n\\v]")]),a._v(" "),s("li",[a._v("\\d = [0-9]")]),a._v(" "),s("li",[a._v("\\D = [^0-9]")])]),a._v(" "),s("h2",{attrs:{id:"量词"}},[a._v("量词")]),a._v(" "),s("p",[a._v("如果我们有三个苹果，我们可以说自己有个3个苹果，也可以说有一个苹果，一个苹果，一个苹果，每种语言都有量词的概念")]),a._v(" "),s("p",[a._v("如果需要匹配多次某个字符，正则也提供了量词的功能，正则中的量词有多个，如?、+、*、{n}、{m,n}、{m,}")]),a._v(" "),s("p",[a._v("{n}匹配n次，比如a{2}，匹配aa")]),a._v(" "),s("p",[a._v("{m, n}匹配m-n次，优先匹配n次，比如a{1,3}，可以匹配aaa、aa、a")]),a._v(" "),s("p",[a._v("{m,}匹配m-∞次，优先匹配∞次，比如a{1,}，可以匹配aaaa...")]),a._v(" "),s("p",[a._v("?匹配0次或1次，优先匹配1次，相当于{0,1}")]),a._v(" "),s("p",[a._v("+匹配1-n次，优先匹配n次，相当于{1,}")]),a._v(" "),s("p",[a._v("*匹配0-n次，优先匹配n次，相当于{0,}")]),a._v(" "),s("p",[a._v("正则默认和人心一样是贪婪的，也就是常说的贪婪模式，凡是表示范围的量词，都优先匹配上限而不是下限")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("a{1, 3} // 匹配字符串'aaa'的话，会匹配aaa而不是a\n")])])]),s("p",[a._v("有时候这不是我们想要的结果，可以在量词后面加上?，就可以开启非贪婪模式")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("a{1, 3}? // 匹配字符串'aaa'的话，会匹配a而不是aaa\n")])])]),s("h2",{attrs:{id:"字符边界"}},[a._v("字符边界")]),a._v(" "),s("p",[a._v("有时我们会有边界的匹配要求，比如已xxx开头，已xxx结尾")]),a._v(" "),s("p",[a._v("^在[]外表示匹配开头的意思")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("^abc // 可以匹配abc，但是不能匹配aabc\n")])])]),s("p",[a._v("$表示匹配结尾的意思")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("abc$ // 可以匹配abc，但是不能匹配abcc\n")])])]),s("p",[a._v("上面提到的\\b表示单词的边界")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("abc\\b // 可以匹配 abc ，但是不能匹配 abcc\n")])])]),s("h2",{attrs:{id:"选择表达式"}},[a._v("选择表达式")]),a._v(" "),s("p",[a._v("有时我们想匹配x或者y，如果x和y是单个字符，可以使用字符集，[abc]可以匹配a或b或c，如果x和y是多个字符，字符集就无能为力了，此时就要用到分组")]),a._v(" "),s("p",[a._v("正则中用|来表示分组，a|b表示匹配a或者b的意思")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("123|456|789 // 匹配 123 或 456 或 789\n")])])]),s("h2",{attrs:{id:"分组与引用"}},[a._v("分组与引用")]),a._v(" "),s("p",[a._v("分组是正则中非常强大的一个功能，可以让上面提到的量词作用于一组字符，而非单个字符，分组的语法是圆括号包裹(xxx)")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("(abc){2} // 匹配abcabc\n")])])]),s("p",[a._v("分组不能放在[]中，分组中还可以使用选择表达式")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("(123|456){2} // 匹配 123123、456456、123456、456123\n")])])]),s("p",[a._v("和分组相关的概念还有一个捕获分组和非捕获分组，分组默认都是捕获的，在分组的(后面添加?:可以让分组变为非捕获分组，非捕获分组可以提高性能和简化逻辑")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'123'.match(/(?123)/) // 返回 ['123']\n'123'.match(/(123)/)  // 返回 ['123', '123']\n")])])]),s("p",[a._v("和分组相关的另一个概念是引用，比如在匹配html标签时，通常希望"),s("xxx"),a._v("后面的xxx能够和前面保持一致")],1),a._v(" "),s("p",[a._v("引用的语法是\\数字，数字代表引用前面第几个捕获分组，注意非捕获分组不能被引用")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<([a-z]+)><\\/\\1> // 可以匹配 `<span></span>` 或 `<div></div>`等\n")])])]),s("h2",{attrs:{id:"预搜索"}},[a._v("预搜索")]),a._v(" "),s("p",[a._v("如果你想匹配xxx前不能是yyy，或者xxx后不能是yyy，那就要用到预搜索")]),a._v(" "),s("p",[a._v("js只支持先行预搜索，也就是xxx前面必须是yyy，或者xxx前面不能是yyy")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("(?=1)2 // 可以匹配12，不能匹配22\n(?!1)2 // 可有匹配22，不能匹配12\n")])])]),s("h2",{attrs:{id:"修饰符"}},[a._v("修饰符")]),a._v(" "),s("p",[a._v("默认正则是区分大小写，这可能并不是我们想要的，正则提供了修饰符的功能，修复的语法如下")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("/xxx/gi // 最后面的g和i就是两个修饰符\n")])])]),s("p",[a._v("g正则遇到第一个匹配的字符就会结束，加上全局修复符，可以让其匹配到结束")]),a._v(" "),s("p",[a._v("i正则默认是区分大小写的，i可以忽略大小写")]),a._v(" "),s("p",[a._v("m正则默认遇到换行符就结束了，不能匹配多行文本，m可以让其匹配多行文本")]),a._v(" "),s("p",[a._v("有时我们会遇到特别负责的正则，有时候可能不太只管，下面推荐一个图形化展示的"),s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//jex.im/regulex",target:"_blank",rel:"noopener noreferrer"}},[a._v("工具"),s("OutboundLink")],1),a._v("，我们把涉及到的语法罗列一下")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("/^[a-z]*[^\\d]{1,10}?(aaa|bbb)(?:ccc)$/\n")])])]),s("p",[a._v("在js中创建正则有两种办法，字面量和new，和创建其他类型变量一样")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var reg = /abc/g // 字面量\nvar reg = new RegExp('abc', 'g') // new方式，意思和上面一样\n")])])]),s("p",[a._v("js中用到正则的地方有两个入口，正则的api和字符串的api，"),s("code",[a._v("RegExp#test")]),a._v("等于"),s("code",[a._v("RegExp.prototype.test")])]),a._v(" "),s("ul",[s("li",[a._v("RegExp#test")]),a._v(" "),s("li",[a._v("RegExp#exec")]),a._v(" "),s("li",[a._v("String#search")]),a._v(" "),s("li",[a._v("String#match")]),a._v(" "),s("li",[a._v("String#split")]),a._v(" "),s("li",[a._v("String#replace")])]),a._v(" "),s("h2",{attrs:{id:"regexp-test"}},[a._v("RegExp#test")]),a._v(" "),s("p",[a._v("每个正则实例都有test方法，test的参数是字符串，返回值是布尔值，表示当前正则是否能匹配指定的字符串")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("/abc/.test('abc') // true\n/abc/.test('abd') // false\n")])])]),s("h2",{attrs:{id:"regexp-exec"}},[a._v("RegExp#exec")]),a._v(" "),s("p",[a._v("exec使用方法和test一样，只是返回值并不是布尔值，而是返回匹配的结果")]),a._v(" "),s("p",[a._v("匹配成功返回一个数组，数组第一项是匹配结果，后面一次是捕获的分组")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('/abc(d)/.exec(\'abcd\') // ["abcd", "d", index: 0, input: "abcd"]\n')])])]),s("p",[a._v("此数组还有另外两个参数，input是输入的字符串，index表示匹配成功的序列在输入字符串中的索引位置")]),a._v(" "),s("p",[a._v("如果有全局参数(g)，第二次匹配时将从上次匹配结束时继续")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var r1 = /ab/\nr1.exec('ababab') // ['ab', index: 0]\nr1.exec('ababab') // ['ab', index: 0]\n\nvar r2 = /ab/g\nr2.exec('ababab') // ['ab', index: 0]\nr2.exec('ababab') // ['ab', index: 2]\nr2.exec('ababab') // ['ab', index: 4]\n")])])]),s("p",[a._v("这一特性可以被用于循环匹配，比如统计字符串中abc的次数")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var reg = /abc/g\nvar str = 'abcabcabcabcabc'\nvar num = 0;\nvar match = null;\nwhile((match = reg.exec(str)) !== null) {\n    num++\n}\nconsole.log(num) // 5\n")])])]),s("p",[a._v("如果匹配失败则返回null")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("/abc(d)/.exec('abc') // null\n")])])]),s("h2",{attrs:{id:"string-search"}},[a._v("String#search")]),a._v(" "),s("p",[a._v("search方法返回匹配成功位置的索引，参数是字符串或正则，结果是索引")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'abc'.search(/abc/) // 0\n'abc'.search(/c/) // 2\n")])])]),s("p",[a._v("如果匹配失败则返回-1")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'abc'.search(/d/) // -1\n\n'abc'.search(/d/) !== -1 // false 转换为布尔值\n")])])]),s("h2",{attrs:{id:"string-match"}},[a._v("String#match")]),a._v(" "),s("p",[a._v("match方法也会返回匹配的结果，匹配结果和exec类似")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'abc'.match(/abc/) // ['abc', index: 0, input: abc]\n'abc'.match(/abd/) // null\n")])])]),s("p",[a._v("如果有全局参数(g)，match会返回所有的结果，并且没有index和input属性")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'abcabcabc'.match(/abc/g) // ['abc', 'abc', 'abc']\n")])])]),s("h2",{attrs:{id:"string-split"}},[a._v("String#split")]),a._v(" "),s("p",[a._v("字符串的split方法，可以用指定符号分隔字符串，并返回数据")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'a,b,c'.split(',') // [a, b, c]\n")])])]),s("p",[a._v("其参数也可以使一个正则，如果分隔符有多个时，就必须使用正则")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'a,b.c'.split(/,|\\./) // [a, b, c]\n")])])]),s("h2",{attrs:{id:"string-replace"}},[a._v("String#replace")]),a._v(" "),s("p",[a._v("字符串的replace方法，可以将字符串的匹配字符，替换成另外的指定字符")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'abc'.replace('a', 'b') // 'bbc'\n")])])]),s("p",[a._v("其第一个参数可以是正则表达式，如果想全局替换需添加全局参数")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'abc'.replace(/[abc]/, 'y') // ybc\n'abc'.replace(/[abc]/g, 'y') // yyy 全局替换\n")])])]),s("p",[a._v("在第二个参数中，也可以引用前面匹配的结果")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'abc'.replace(/a/, '$&b') // abbc $& 引用前面的匹配字符\n'abc'.replace(/(a)b/, '$1a') // aac &n 引用前面匹配字符的分组\n'abc'.replace(/b/, '$\\'') // aac $` 引用匹配字符前面的字符\n'abc'.replace(/b/, \"$'\") // acc $' 引用匹配字符后面的字符\n")])])]),s("p",[a._v("replace的第二个参数也可以是函数，其第一个参数是匹配内容，后面的参数是匹配的分组")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("'abc'.replace(/\\w/g, function (match, $1, $2) {\n    return match + '-'\n})\n// a-b-c-\n")])])]),s("h2",{attrs:{id:"regexp"}},[a._v("RegExp")]),a._v(" "),s("p",[a._v("RegExp是一个全局函数，可以用来创建动态正则，其自身也有一些属性")]),a._v(" "),s("ul",[s("li",[a._v("$_")]),a._v(" "),s("li",[a._v("$n")]),a._v(" "),s("li",[a._v("input")]),a._v(" "),s("li",[a._v("length")]),a._v(" "),s("li",[a._v("lastMatch")])]),a._v(" "),s("p",[a._v("来个例子")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('/a(b)/.exec(\'abc\') // ["ab", "b", index: 0, input: "abc"]\n\nRegExp.$_ // abc 上一次匹配的字符串\nRegExp.$1 // b 上一次匹配的捕获分组\nRegExp.input // abc 上一次匹配的字符串\nRegExp.lastMatch // ab 上一次匹配成功的字符\nRegExp.length // 2 上一次匹配的数组长度\n')])])]),s("h2",{attrs:{id:"实例属性"}},[a._v("实例属性")]),a._v(" "),s("p",[a._v("正则表达式的实例上也有一些属性")]),a._v(" "),s("ul",[s("li",[a._v("flags")]),a._v(" "),s("li",[a._v("ignoreCase")]),a._v(" "),s("li",[a._v("global")]),a._v(" "),s("li",[a._v("multiline")]),a._v(" "),s("li",[a._v("source")]),a._v(" "),s("li",[a._v("lastIndex")])]),a._v(" "),s("p",[a._v("还是看例子")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var r = /abc/igm;\n\nr.flags // igm\nr.ignoreCase // true\nr.global // true\nr.multiline // true\nr.source // abc\n")])])]),s("p",[a._v("lastIndex比较有意思，表示上次匹配成功的是的索引")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var r = /abc/igm;\nr.exec('abcabcabc')\nr.lastIndex // 3\n\nr.exec('abcabcabc')\nr.lastIndex // 6\n")])])]),s("p",[a._v("可以更改lastIndex让其重新开始")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var r = /abc/igm;\nr.exec('abcabcabc') // [\"abc\", index: 0]\n\nr.exec('abcabcabc') // [\"abc\", index: 3]\nr.lastIndex = 0\nr.exec('abcabcabc') // [\"abc\", index: 0]\n")])])]),s("h2",{attrs:{id:"实战实例"}},[a._v("实战实例")]),a._v(" "),s("p",[a._v("来几个常用的例子")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("/(?:0\\d{2,3}-)?\\d{7}/ // 电话号 010-xxx xxx\n\n/^1[378]\\d{9}$/ // 手机号 13xxx 17xxx 18xxx\n\n/^[0-9a-zA-Z_]+@[0-9a-zA-Z]+\\.[z-z]+$/ // 邮箱\n")])])]),s("p",[a._v("去除字符串前后空白")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("str = str.replace(/^\\s*|\\s*$/g, '')\n")])])]),s("h2",{attrs:{id:"总结"}},[a._v("总结")]),a._v(" "),s("p",[a._v("到这里你已经学会了正则的语法，并且学会了在js中使用正则的方法，接下来快去实战吧，要想学会正则必须多加练习，正所谓拳不离手曲不离口吗")]),a._v(" "),s("p",[a._v("在"),s("a",{attrs:{href:"http://yanhaijing.com/javascript/2017/11/29/regexp-principle/",target:"_blank",rel:"noopener noreferrer"}},[a._v("下一篇文章"),s("OutboundLink")],1),a._v("中，准备讲一讲正则的实现原理，难度略大o(╯□╰)o")])])}),[],!1,null,null,null);t.default=n.exports}}]);