(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{379:function(t,s,a){"use strict";a.r(s);var v=a(9),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"基础知识"}},[t._v("基础知识")]),t._v(" "),a("p",[t._v("js 由三部分组成")]),t._v(" "),a("ul",[a("li",[t._v("ECMAScript: 提供核心语言功能，就是对实现该标准规定的各个方面内容的语言的描述")]),t._v(" "),a("li",[t._v("DOM(Document Object Model): 呈现以及与任意 HTML 或 XML 交互的 API 文档。DOM 是载入到浏览器中的文档模型，它用节点树的形式来表现文档，每个节点代表文档的构成部分")]),t._v(" "),a("li",[t._v("BOM（Browser Object Model）: 描述了和浏览器交互的方法和接口")])]),t._v(" "),a("h2",{attrs:{id:"运算符"}},[t._v("运算符")]),t._v(" "),a("h3",{attrs:{id:"赋值运算符"}},[t._v("赋值运算符")]),t._v(" "),a("p",[a("code",[t._v("=")]),t._v("把它右边的运算值赋给左边")]),t._v(" "),a("h3",{attrs:{id:"算术运算符"}},[t._v("算术运算符")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("+")]),t._v(": 数值求和，或者字符串拼接")]),t._v(" "),a("li",[a("code",[t._v("-")]),t._v(": 操作数相减，非数字用 Number() 先转为数字再运算")]),t._v(" "),a("li",[a("code",[t._v("/")]),t._v(": 操作数相除，非数字用 Number() 先转为数字再运算")]),t._v(" "),a("li",[a("code",[t._v("*")]),t._v(": 操作数的乘积，非数字用 Number() 先转为数字再运算")]),t._v(" "),a("li",[a("code",[t._v("%")]),t._v(": 求余，返回第一个操作数对第二个操作数的模\n"),a("ul",[a("li",[t._v("任何数字对 Infinity 取余都为自身")]),t._v(" "),a("li",[t._v("Infinity 对任何数字（包括不是数字的 Infinity）取余都为 NaN")]),t._v(" "),a("li",[t._v("非数字取模用 Number() 转为数字再运算")])])]),t._v(" "),a("li",[a("code",[t._v("**")]),t._v(": 求幂，返回第一个操作数做底数，第二个操作数做指数的乘方")]),t._v(" "),a("li",[a("code",[t._v("++")]),t._v(": 递增，分前置和后置，前置型返回一个新的值，但后置型返回原来的值")]),t._v(" "),a("li",[a("code",[t._v("--")]),t._v(": 递减，分前置和后置，前置型返回一个新的值，但后置型返回原来的值")])]),t._v(" "),a("h3",{attrs:{id:"位操作符"}},[t._v("位操作符")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("&")]),t._v(": 与。对于每一个比特位，只有两个操作数相应的比特位都是 1 时，结果才为 1，否则为 0")]),t._v(" "),a("li",[a("code",[t._v("|")]),t._v(": 或。对于每一个比特位，当两个操作数相应的比特位至少有一个 1 时，结果为 1，否则为 0")]),t._v(" "),a("li",[a("code",[t._v("^")]),t._v(": 异或。对于每一个比特位，当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0")]),t._v(" "),a("li",[a("code",[t._v("~")]),t._v(": 非。反转操作数的比特位，即 0 变成 1，1 变成 0")]),t._v(" "),a("li",[a("code",[t._v("<<")]),t._v(": 左移。将 a 的二进制形式向左移 b (< 32) 比特位，右边用 0 填充")]),t._v(" "),a("li",[a("code",[t._v(">>")]),t._v(": 有符号右移。将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位")]),t._v(" "),a("li",[a("code",[t._v(">>>")]),t._v(": 无符号右移。将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位，并使用 0 在左侧填充")])]),t._v(" "),a("p",[t._v("计算一个负数的二进制补码，需要经过下列 3 个步骤:")]),t._v(" "),a("ol",[a("li",[t._v("求这个数值绝对值的二进制码（例如，要求-18 的二进制补码，先求 18 的二进制码）")]),t._v(" "),a("li",[t._v("求二进制反码，即将 0 替换为 1，将 1 替换为 0")]),t._v(" "),a("li",[t._v("得到的二进制反码加 1")])]),t._v(" "),a("h3",{attrs:{id:"逗号操作符"}},[t._v("逗号操作符")]),t._v(" "),a("p",[t._v("对它的每个操作数求值（从左到右），并返回最后一个操作数的值")]),t._v(" "),a("h3",{attrs:{id:"比较操作符"}},[t._v("比较操作符")]),t._v(" "),a("blockquote",[a("p",[t._v("注意: 1. NaN 不等于自身。 2.引用类型只有地址相同才相等。")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("==")]),t._v(": 相等。会对两个不同类型的操作数转换类型，然后进行严格比较。当两个操作数都是对象时，JavaScript 会比较其在栈内存中的引用地址。")]),t._v(" "),a("li",[a("code",[t._v("!=")]),t._v(": 不相等。会对两个不同类型的操作数转换类型，然后进行严格比较。当两个操作数都是对象时，JavaScript 会比较其在栈内存中的引用地址。")]),t._v(" "),a("li",[a("code",[t._v("===")]),t._v(": 全等。不会进行类型转换。")]),t._v(" "),a("li",[a("code",[t._v("!==")]),t._v(": 非全等。当操作数不相等或不同类型时返回 true")]),t._v(" "),a("li",[a("code",[t._v(">")]),t._v(": 大于运算符。仅当左操作数大于右操作数时返回 true")]),t._v(" "),a("li",[a("code",[t._v(">=")]),t._v(": 当左操作数大于或等于右操作数时返回 true")]),t._v(" "),a("li",[a("code",[t._v("<")]),t._v(": 当左操作数小于右操作数时返回 true")]),t._v(" "),a("li",[a("code",[t._v("<=")]),t._v(": 当左操作数小于或等于右操作数时返回 true")])]),t._v(" "),a("h3",{attrs:{id:"逻辑运算符"}},[t._v("逻辑运算符")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("!")]),t._v(": 非。如果运算数是对象，返回 false\n"),a("ul",[a("li",[t._v("如果运算数是非''字符串，返回 false")])])]),t._v(" "),a("li",[a("code",[t._v("&&")]),t._v(": 与。两边转换"),a("code",[t._v("boolean")]),t._v("，都为 true，返回后面的。有 false，直接返回 false 的，都为 false，返回前面的")]),t._v(" "),a("li",[a("code",[t._v("||")]),t._v(": 或。两边转换为"),a("code",[t._v("boolean")]),t._v(" ，返回 true 的那个（都为 true 返回前面那个，都为 false 返回后面那个）")])]),t._v(" "),a("h3",{attrs:{id:"条件（三元）运算符"}},[t._v("条件（三元）运算符")]),t._v(" "),a("p",[t._v("条件（三元）运算符是 JavaScript 仅有的使用三个操作数的运算符。经常作为 if 语句的简短形式来使用。")]),t._v(" "),a("p",[t._v("condition ? expr1 : expr2")]),t._v(" "),a("h3",{attrs:{id:"运算符的优先级"}},[t._v("运算符的优先级")]),t._v(" "),a("p",[t._v("优先级从高到底")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("()")]),t._v("优先级最高")]),t._v(" "),a("li",[t._v("一元运算符 "),a("code",[t._v("++")]),t._v(" "),a("code",[t._v("--")]),t._v(" "),a("code",[t._v("!")])]),t._v(" "),a("li",[t._v("算数运算符 先"),a("code",[t._v("*")]),t._v(" "),a("code",[t._v("/")]),t._v(" "),a("code",[t._v("%")]),t._v("后"),a("code",[t._v("+")]),t._v(" "),a("code",[t._v("-")])]),t._v(" "),a("li",[t._v("关系运算符 "),a("code",[t._v(">")]),t._v(" "),a("code",[t._v(">=")]),t._v(" "),a("code",[t._v("<")]),t._v(" "),a("code",[t._v("<=")])]),t._v(" "),a("li",[t._v("相等运算符 "),a("code",[t._v("==")]),t._v(" "),a("code",[t._v("!=")]),t._v(" "),a("code",[t._v("===")]),t._v(" "),a("code",[t._v("!==")])]),t._v(" "),a("li",[t._v("逻辑运算符 先"),a("code",[t._v("&&")]),t._v("后"),a("code",[t._v("||")])]),t._v(" "),a("li",[t._v("赋值运算符")])]),t._v(" "),a("h2",{attrs:{id:"变量"}},[t._v("变量")]),t._v(" "),a("p",[t._v("变量在 JavaScript 中就是用一个变量名表示，变量名是大小写英文、数字、"),a("code",[t._v("$")]),t._v("和"),a("code",[t._v("_")]),t._v("的组合，且不能用数字开头。变量名也不能是 JavaScript 的关键字，大小写敏感。")]),t._v(" "),a("h3",{attrs:{id:"变量声明"}},[t._v("变量声明")]),t._v(" "),a("p",[t._v("var、let、const、function")]),t._v(" "),a("h2",{attrs:{id:"strict-模式"}},[t._v("strict 模式")]),t._v(" "),a("p",[t._v("可以为一个单独的函数、或是一个文件切换到 strict 模式")]),t._v(" "),a("p",[t._v("启用 strict 模式的方法是在 JavaScript 代码的第一行写上："),a("code",[t._v("'use strict';")])]),t._v(" "),a("h3",{attrs:{id:"严格模式的行为"}},[t._v("严格模式的行为")]),t._v(" "),a("ul",[a("li",[t._v("全局变量必须显示声明")]),t._v(" "),a("li",[t._v("禁止 this 指向 window 对象")]),t._v(" "),a("li",[t._v("禁止重名（函数参数、对象属性等）")]),t._v(" "),a("li",[t._v("新增了一些保留字")]),t._v(" "),a("li",[t._v("...")])]),t._v(" "),a("h3",{attrs:{id:"with-语句"}},[t._v("with 语句")]),t._v(" "),a("p",[t._v("with 语句的作用是将代码的作用域设置到一个特定的对象中。with 语句的语法如下：")]),t._v(" "),a("p",[a("code",[t._v("with (expression) statement;")])]),t._v(" "),a("p",[t._v("定义 with 语句的目的主要是为了简化多次编写同一个对象的工作，这意味着在"),a("code",[t._v("with")]),t._v("语句的代码块内部，每个变量首先被认为是一个局部变量，而如果在局部环境中找不到该变量的定义，就会查询 with 定义的对象中是否有同名的属性。如果发现了同名属性，则以 with 定义的对象属性的值作为变量的值。严格模式下不允许使用"),a("code",[t._v("with")]),t._v("语句，否则将视为语法错误。")]),t._v(" "),a("h2",{attrs:{id:"兼容"}},[t._v("兼容")]),t._v(" "),a("h3",{attrs:{id:"polyfill"}},[t._v("polyfill")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://remysharp.com/2010/10/08/what-is-a-polyfill",target:"_blank",rel:"noopener noreferrer"}},[t._v("polyfill"),a("OutboundLink")],1),t._v(" 是指则很难对一个新特性的定义，制造一段行为等价的代码，这段代码可以运行在老版本的 JS 环境中。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isNaN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isNaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("并不是所有的新特性都可以完全填补。有时一种特性的大部分行为可以被填补，但是仍然存在一些小的偏差。在实现填补时应当小心确保尽可能严格地遵循语言规范。")]),t._v(" "),a("h3",{attrs:{id:"转译器"}},[t._v("转译器")]),t._v(" "),a("p",[t._v("使用一个工具将你的新版本代码转换为等价的老版本代码，这个处理通常被称为“转译器（transpiling）”。例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 42")]),t._v("\n")])])]),a("p",[t._v("转译器转义后：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("转译器推荐：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Babel"),a("OutboundLink")],1),t._v(": 前身为 6to5")])])])}),[],!1,null,null,null);s.default=_.exports}}]);