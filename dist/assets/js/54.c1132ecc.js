(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{369:function(t,s,a){"use strict";a.r(s);var v=a(9),n=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"版本控制工具"}},[t._v("版本控制工具")]),t._v(" "),a("h2",{attrs:{id:"为什么要有版本控制系统"}},[t._v("为什么要有版本控制系统")]),t._v(" "),a("ol",[a("li",[t._v("在开发过程中，经常需要对一个文件进行修改甚至删除，但是我们又希望能够保存这个文件的历史记录，如果通过备份，那么管理起来会非常的复杂。")]),t._v(" "),a("li",[t._v("在多人开发时，如果需要多人合作开发一个页面，那么修改以及合并也会非常的棘手。容易出现冲突。")])]),t._v(" "),a("h2",{attrs:{id:"什么是版本控制系统"}},[t._v("什么是版本控制系统")]),t._v(" "),a("p",[t._v("版本控制系统（Version Control System）:是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。版本控制系统不仅可以应用于软件源代码的文本文件，而且可以对任何类型的文件进行版本控制。")]),t._v(" "),a("p",[t._v("常见的版本控制系统有：svn、cvs、git")]),t._v(" "),a("p",[t._v("【使用 webstorm 演示版本控制系统】")]),t._v(" "),a("h2",{attrs:{id:"版本控制系统分类"}},[t._v("版本控制系统分类")]),t._v(" "),a("p",[t._v("参考文章："),a("a",{attrs:{href:"https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于版本控制的介绍"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"本地版本控制系统"}},[t._v("本地版本控制系统")]),t._v(" "),a("p",[t._v("本地版本控制系统就是在一台机器上，记录版本的不同变化，保证内容不会丢失")]),t._v(" "),a("p",[t._v("缺点：如果多人开发，每个人都在不同的系统和电脑上开发，没办法协同工作。")]),t._v(" "),a("h3",{attrs:{id:"集中式版本控制系統"}},[t._v("集中式版本控制系統")]),t._v(" "),a("p",[t._v("svn/cvs 都是集中式的版本控制系统")]),t._v(" "),a("ol",[a("li",[t._v("需要一个中央服务器来管理代码的的版本和备份")]),t._v(" "),a("li",[t._v("所有的用户电脑都是从中央服务器获取代码或者是将本地的代码提交到中央服务器")]),t._v(" "),a("li",[t._v("依赖与网络环境，如果连不上中央服务器，就无法提交和获取代码。")]),t._v(" "),a("li",[t._v("如果中央服务器宕机，所有人都无法工作。")])]),t._v(" "),a("h3",{attrs:{id:"分布式版本控制系统"}},[t._v("分布式版本控制系统")]),t._v(" "),a("p",[t._v("git 是分布式的版本控制系统。")]),t._v(" "),a("ol",[a("li",[t._v("需要一台服务器作为代码仓库")]),t._v(" "),a("li",[t._v("每个用户电脑都是一个服务器（代码仓库），并且和代码仓库是镜像的，用户修改和获取代码都是提交到自己的服务器当中。")]),t._v(" "),a("li",[t._v("不需要网络就可以进行工作。")]),t._v(" "),a("li",[t._v("当连接网络时，用户可以选择将自己的服务器与代码仓库进行同步。")])]),t._v(" "),a("h2",{attrs:{id:"git"}},[t._v("git")]),t._v(" "),a("blockquote",[a("p",[t._v("Git 是一款免费、开源的"),a("strong",[t._v("分布式")]),t._v(" "),a("strong",[t._v("版本控制系统")]),t._v(" ，用于敏捷高效地处理任何或小或大的项目。")])]),t._v(" "),a("p",[t._v("Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源")]),t._v(" "),a("h3",{attrs:{id:"安装"}},[t._v("安装")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://git-scm.com/download/win",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载地址"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("安装很简单，一直下一步即可。在任意的目录下右键，能够出现下图，表示安装成功了。")]),t._v(" "),a("p",[t._v("git 是用法方式主要有两种")]),t._v(" "),a("ul",[a("li",[t._v("git gui，即图形化界面的方式")]),t._v(" "),a("li",[t._v("git bash，命令行的方式")])]),t._v(" "),a("ol",[a("li",[t._v("在任意文件夹中，都可以使用右键，通过 git bash here 打开命令行窗口，此时的路径就是当前目录。")]),t._v(" "),a("li",[t._v("窗口上右键，通过 options--\x3eText--\x3eselect 可以调整字体的大小。")])]),t._v(" "),a("h3",{attrs:{id:"bash-入门"}},[t._v("bash 入门")]),t._v(" "),a("p",[t._v("bash 是许多 linux 系统默认的 shell(命令行工具)。")]),t._v(" "),a("p",[t._v("cmd 和 powershell 是 window 系统默认的 shell(命令行工具)。")]),t._v(" "),a("p",[t._v("二者的功能都一样，通过命令行来操作计算机的功能。")]),t._v(" "),a("p",[t._v("为什么要学习 bash")]),t._v(" "),a("ul",[a("li",[t._v("必须使用 linux 风格的 shell 来运行 git 命令")]),t._v(" "),a("li",[t._v("工作过程中，项目都是部署在 linux 系统中，了解一些常用的 bash 命令也是有必要的。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cd 改变目录  （change directory）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" images   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#进入images文件夹")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#进入上一层目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#进入用户根目录")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tab 自动补全，当我们输命令或者目录很长时，可以使用tab键进行自动补全。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 按两次tab，会把所有符合要求的内容都列出来。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pwd 打印当前目录的路径 （print work directory）")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ls 展示当前目录列表（list）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 展示当前目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -a      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 展示全部内容，包括隐藏文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -l      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以列表的形式展示内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -al     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以列表的形式展示所有的内容，包括隐藏文件。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" --help  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看ls所有的参数。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -l images   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 展示images目录下的文件，如果没有写目录，默认展示当前目录。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# clear reset清屏")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清除屏幕内容，滚动条，保留了历史")]),t._v("\nreset  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重置，历史记录没了。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mkdir  创建一个文件夹 （make directory）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" css          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个css的文件夹")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" css img js   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建了三个文件夹")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rmdir  删除一个空的文件夹（没啥用）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rmdir")]),t._v(" img   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除文件夹")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# touch  创建文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" index.html   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建了一个index.html文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" css/index.css "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在css目录下创建idnex.css文件")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rm 删除一个文件获取文件夹")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" index.html "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除index.html文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" js         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除空的js文件夹")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -r css     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 递归删除一个文件夹")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mv 移动文件（move）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" index.html js            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将html文件移动到js文件夹中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" index.html index2.html   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将index.html重命名为index2.html")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cp 复制文件（cp）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" index.html index2.html   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 复制index.html文件，命名为index2.html")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" -r css css02             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果复制的是文件夹，需要使用-r参数。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat 查看文件全部内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" index.html\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# less 查看文件部分内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("less")]),t._v(" index.html\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# q退出查看")]),t._v("\n")])])]),a("h3",{attrs:{id:"开始"}},[t._v("开始")]),t._v(" "),a("p",[t._v("配置你的用户邮箱和用户名称，这两条配置是很重要的，每次提交 git 代码都会引用这两条信息，记录了谁提交了代码，会永久的记录在历史记录中。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git config  user.name 你的目标用户名")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git config  user.email 你的目标邮箱名")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用--global参数，配置全局的用户名和邮箱，只需要配置一次即可。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config  --global user.name hucc\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config  --global user.email "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("111111")]),t._v("@qq.com\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看配置信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --list\n")])])]),a("ol",[a("li",[t._v("初始化 git 仓库"),a("code",[t._v("git init")])]),t._v(" "),a("li",[t._v("查看当前 git 仓库的状态"),a("code",[t._v("git status")])]),t._v(" "),a("li",[t._v("将文件添加到 git 的暂存区"),a("code",[t._v("git add 文件名")])]),t._v(" "),a("li",[t._v("将文件由暂存区提交到仓库区"),a("code",[t._v("git commit -m '提交说明'")])]),t._v(" "),a("li",[t._v("查看提交日子"),a("code",[t._v("git log")])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要对某个项目使用git进行管理，需要使用git init命令初始化git仓库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会在当前目录生成一个隐藏文件夹 .git  不要去修改这个文件夹下的任意东西。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看git的状态 ,如果此时新建一个文件，那么这个文件是没有被追踪的，说白了git还没有管理这个新建的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 告诉git开始对index.html文件进行追踪， git会在暂存区中存储这个文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" index.html\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 让文件由暂存区提交到仓库区。此时文件才真正的被git管理了。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果提交日志乱码，右键--\x3eoptions--\x3eText--\x3e将编码改成utf-8")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'第一次提交'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看提交日志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n")])])]),a("h2",{attrs:{id:"git-命令详解"}},[t._v("git 命令详解")]),t._v(" "),a("h3",{attrs:{id:"git-add-重点"}},[t._v("git add(重点)")]),t._v(" "),a("ul",[a("li",[t._v("作用：让 git 追踪一个新的文件，并且将文件由 工作区 添加到 暂存区，暂存文件")]),t._v(" "),a("li",[t._v("命令："),a("code",[t._v("git add 文件名/目录名")]),t._v(" "),a("ul",[a("li",[t._v("例如： "),a("code",[t._v("git add index.html")])])])]),t._v(" "),a("li",[a("code",[t._v("git add --all")]),t._v("  或者  "),a("code",[t._v("git add -A")]),t._v(" 获取"),a("code",[t._v("git add .")]),t._v("（简写） 添加所有文件")]),t._v(" "),a("li",[a("code",[t._v("git add a.txt b.txt")]),t._v("  同时添加两个文件")]),t._v(" "),a("li",[a("code",[t._v("git add *.js")]),t._v("  添加当前目录下的所有 js 文件")]),t._v(" "),a("li",[a("code",[t._v("git add css/")]),t._v("添加 css 目录下所有的文件")])]),t._v(" "),a("h3",{attrs:{id:"git-checkout-文件名"}},[t._v("git checkout 文件名")]),t._v(" "),a("ul",[a("li",[t._v("作用：暂存区的内容恢复到工作区。")]),t._v(" "),a("li",[a("code",[t._v("git checkout 1.txt")]),t._v(" 将暂存区中 1.txt 文件恢复到工作区")])]),t._v(" "),a("h3",{attrs:{id:"git-commit（重点）"}},[t._v("git commit（重点）")]),t._v(" "),a("ul",[a("li",[t._v("作用：将文件由 暂存区 添加到 仓库区，生成版本号（历史记录，以后可以回退到某一个版本号）")]),t._v(" "),a("li",[a("code",[t._v('git commit -m "提交说明"')])])]),t._v(" "),a("h3",{attrs:{id:"git-status"}},[t._v("git status")]),t._v(" "),a("ul",[a("li",[t._v("作用：查看文件的状态")])]),t._v(" "),a("ul",[a("li",[t._v("命令："),a("code",[t._v("git status")])]),t._v(" "),a("li",[t._v("命令："),a("code",[t._v("git stauts -s")]),t._v("  简化日志输出格式")])]),t._v(" "),a("h3",{attrs:{id:"git-log"}},[t._v("git log")]),t._v(" "),a("ul",[a("li",[t._v("作用：查看提交日志")]),t._v(" "),a("li",[a("code",[t._v("git log")]),t._v(" 只能查看当前 head 以及以前的日志")]),t._v(" "),a("li",[a("code",[t._v("git log --oneline")]),t._v(" 简洁的日志信息")]),t._v(" "),a("li",[a("code",[t._v("git reflog")]),t._v(" 查看所有的提交变更日志")])]),t._v(" "),a("h3",{attrs:{id:"git-reset"}},[t._v("git reset")]),t._v(" "),a("ul",[a("li",[t._v("作用：版本回退，将代码恢复到已经提交的某一个版本中。")]),t._v(" "),a("li",[a("code",[t._v("git reset --hard 版本号")]),t._v(" 将代码回退到某个指定的版本(版本号只要有前几位即可)")]),t._v(" "),a("li",[a("code",[t._v("git reset --hard head~1")]),t._v("将版本回退到上一次提交\n"),a("ul",[a("li",[t._v("~1:上一次提交")]),t._v(" "),a("li",[t._v("~2:上上次提交")]),t._v(" "),a("li",[t._v("~0:当前提交")])])])]),t._v(" "),a("h2",{attrs:{id:"git-的三个区"}},[t._v("git 的三个区")]),t._v(" "),a("p",[t._v("工作区、暂存区、本地仓库区")]),t._v(" "),a("p",[t._v("工作区：我们书写代码的地方，工作的目录就叫工作区。")]),t._v(" "),a("p",[t._v("暂存区：使用 add 命令，在"),a("code",[t._v(".git")]),t._v("目录中的一个索引文件，记录修改的文件")]),t._v(" "),a("p",[t._v("本地仓库区：将保存在暂存区域的内容永久转储到 Git 仓库中，生成版本号。生成版本号之后，就可以任何的回退到某一个具体的版本。")]),t._v(" "),a("h2",{attrs:{id:"git-忽视文件"}},[t._v("git 忽视文件")]),t._v(" "),a("blockquote",[a("p",[t._v("在仓库中，有些文件是不想被 git 管理的，比如数据的配置密码、写代码的一些思路等。git 可以通过配置从而达到忽视掉一些文件，这样这些文件就可以不用提交了。")])]),t._v(" "),a("ul",[a("li",[t._v("在仓库的根目录创建一个"),a("code",[t._v(".gitignore")]),t._v("的文件，文件名是固定的。")]),t._v(" "),a("li",[t._v("将不需要被 git 管理的文件路径添加到"),a("code",[t._v(".gitignore")]),t._v("中")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽视idea.txt文件")]),t._v("\nidea.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽视.gitignore文件")]),t._v("\n.gitignore\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽视css下的index.js文件")]),t._v("\ncss/index.js\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽视css下的所有的js文件")]),t._v("\ncss/*.js\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽视css下的所有文件")]),t._v("\ncss/*.*\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽视css文件夹")]),t._v("\ncss\n")])])]),a("h1",{attrs:{id:"git-分支操作"}},[t._v("git 分支操作")]),t._v(" "),a("p",[t._v("分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习 Git 的时候，另一个你正在另一个平行宇宙里努力学习 SVN。")]),t._v(" "),a("p",[t._v("如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了 Git 又学会了 SVN！")]),t._v(" "),a("p",[a("img",{attrs:{src:"images/fenzhi.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"为什么要有分支？"}},[a("strong",[t._v("为什么要有分支？")])]),t._v(" "),a("ul",[a("li",[t._v("如果你要开发一个新的功能，需要 2 周时间，第一周你只能写 50%代码，如果此时立即提交，代码没写完，不完整的代码会影响到别人无法工作。如果等代码写完再提交，代码很容易丢失，风险很大。")]),t._v(" "),a("li",[t._v("有了分支，你就可以创建一个属于自己的分支，别人看不到，也不影响别人，你在自己的分支上工作，提交到自己的分支上，等到功能开发完毕，一次性的合并到原来的分支。这样既安全，又不影响他人工作。")]),t._v(" "),a("li",[t._v("在工作过程中，经常会碰到"),a("strong",[t._v("多任务并行开发")]),t._v(" 的情况，使用分支就能很好的避免任务之间的影响。")]),t._v(" "),a("li",[t._v("其他版本工具比如 svn，cvs 中也有分支这个概念，但是这些工具中的分支操作非常的慢，形同摆设。")])]),t._v(" "),a("h2",{attrs:{id:"分支操作的命令"}},[t._v("分支操作的命令")]),t._v(" "),a("blockquote",[a("p",[t._v("在 git 中，分支实质上仅仅是一个指针，每次代码提交后，这个分支指针就会向后移动，保证一直指向最后一次提交的的版本。")])]),t._v(" "),a("h3",{attrs:{id:"创建分支"}},[t._v("创建分支")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git branch 分支名称")]),t._v("创建分支，分支中的代码，在创建时与当前分支的内容完全相同。")]),t._v(" "),a("li",[t._v("git 在第一次提交时，就有了一个叫"),a("code",[t._v("master")]),t._v("的主分支。")])]),t._v(" "),a("h3",{attrs:{id:"查看分支"}},[t._v("查看分支")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git branch")]),t._v("可以查看所有的分支，")]),t._v(" "),a("li",[t._v("在当前分支的前面会有一个"),a("code",[t._v("*")])])]),t._v(" "),a("h3",{attrs:{id:"切换分支"}},[t._v("切换分支")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git checkout 分支名称")]),t._v("切换分支")]),t._v(" "),a("li",[t._v("在当前分支的任何操作，都不会影响到其他的分支，除非进行了分支合并。")]),t._v(" "),a("li",[t._v("切换分支之前，"),a("strong",[t._v("必须保证代码已经提交了")])])]),t._v(" "),a("h3",{attrs:{id:"创建并切换分支"}},[t._v("创建并切换分支")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git checkout -b 分支名称")]),t._v(" 创建并切换分支")]),t._v(" "),a("li",[t._v("切换分支会做两件事情\n"),a("ul",[a("li",[t._v("把 head 指针指向当前的分支")]),t._v(" "),a("li",[t._v("将工作区的文件变成当前分支最新的内容。")])])])]),t._v(" "),a("h3",{attrs:{id:"删除分支"}},[t._v("删除分支")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git branch -d 分支名称")]),t._v(" 可以删除分支")]),t._v(" "),a("li",[t._v("注意：不能在当前分支删除当前分支，需要切换到其他分支才能删除。")]),t._v(" "),a("li",[t._v("注意："),a("code",[t._v("master")]),t._v("分支是可以删除的，但是不推荐那么做。")])]),t._v(" "),a("h3",{attrs:{id:"合并分支"}},[t._v("合并分支")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git merge 分支名称")]),t._v(" 将其他分支的内容合并到当前分支。")]),t._v(" "),a("li",[t._v("在"),a("code",[t._v("master")]),t._v("分支中执行"),a("code",[t._v("git merge dev")]),t._v(" 将"),a("code",[t._v("dev")]),t._v("分支中的代码合并到"),a("code",[t._v("master")]),t._v("分支")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("分支合并"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"git-合并冲突"}},[t._v("git 合并冲突")]),t._v(" "),a("ul",[a("li",[t._v("对于同一个文件，如果有多个分支需要合并时，容易出现冲突。")]),t._v(" "),a("li",[t._v("合并分支时，如果出现冲突，只能手动处理，再次提交，一般的作法，把自己的代码放到冲突代码的后面即可。")])]),t._v(" "),a("h1",{attrs:{id:"远程仓库"}},[t._v("远程仓库")]),t._v(" "),a("p",[t._v("所有的程序员都可以通过远程仓库来进行版本的共享，达到所有人的代码一致的效果。")]),t._v(" "),a("h2",{attrs:{id:"远程仓库相关的命令"}},[t._v("远程仓库相关的命令")]),t._v(" "),a("h3",{attrs:{id:"git-push"}},[t._v("git push")]),t._v(" "),a("ul",[a("li",[t._v("作用：将本地仓库中代码提交到远程仓库")]),t._v(" "),a("li",[a("code",[t._v("git push 仓库地址 master")]),t._v(" 在代码提交到远程仓库，注意 master 分支必须写，不能省略")]),t._v(" "),a("li",[t._v("例子："),a("code",[t._v("git push git@github.com:hucongcong/test.git master")]),t._v(" 如果第一次使用，需要填写 github 的用户名和密码")])]),t._v(" "),a("h3",{attrs:{id:"git-pull"}},[t._v("git pull")]),t._v(" "),a("ul",[a("li",[t._v("作用：将远程的代码下载到本地")]),t._v(" "),a("li",[a("code",[t._v("git pull 代码地址")]),t._v(" 将远程的代码中 master 分支下载到本地")]),t._v(" "),a("li",[t._v("通常在 push 前，需要先 pull 一次。")])]),t._v(" "),a("h3",{attrs:{id:"git-clone"}},[t._v("git clone")]),t._v(" "),a("ul",[a("li",[t._v("作用：克隆远程仓库的代码到本地")]),t._v(" "),a("li",[t._v("`git clone [远程仓库地址]")]),t._v(" "),a("li",[a("code",[t._v("git clone git://github.com/schacon/test.git")]),t._v("会在本地新建一个"),a("code",[t._v("test")]),t._v("文件夹，在 test 中包含了一个"),a("code",[t._v(".git")]),t._v("目录，用于保存所有的版本记录，同时 test 文件中还有最新的代码，你可以直接进行后续的开发和使用。")]),t._v(" "),a("li",[t._v("git 克隆默认会使用远程仓库的项目名字，也可以自己指定。需要是使用以下命令："),a("code",[t._v("git clone [远程仓库地址] [本地项目名]")])])]),t._v(" "),a("h3",{attrs:{id:"git-remote"}},[t._v("git remote")]),t._v(" "),a("p",[t._v("每次 push 和 pull 操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git remote add 仓库别名 仓库地址")]),t._v(" 使用仓库别名替代仓库地址。仓库别名相当于一个 js 变量，仓库地址就是对应的值。\n"),a("ul",[a("li",[a("code",[t._v("git remote add hucc git@github.com:hucongcong/test.git")]),t._v(" 设置了一个 hucc 的仓库别名，以后 push 和 pull 都可以不用仓库地址，而用 hucc")])])]),t._v(" "),a("li",[a("code",[t._v("git remote remove hucc")]),t._v(" 删除 hucc 这个仓库别名。")]),t._v(" "),a("li",[a("code",[t._v("git remote")]),t._v(" 查看所有的仓库别名")]),t._v(" "),a("li",[t._v("如果使用了"),a("code",[t._v("git clone")]),t._v("命令从远程仓库获取下来的，那么这个本地仓库会自动添加一个 origin 的远程地址，指向的就是克隆的远程地址。")])]),t._v(" "),a("p",[t._v("git push origin master // 把本地master分支的最新修改推送至GitHub")]),t._v(" "),a("h2",{attrs:{id:"github"}},[t._v("github")]),t._v(" "),a("p",[t._v("git 与 github 没有直接的关系。")]),t._v(" "),a("ul",[a("li",[t._v("git 是一个版本控制工具。")]),t._v(" "),a("li",[t._v("github 是一个代码托管平台，是 git 的一个远程代码仓库。")]),t._v(" "),a("li",[t._v("将来工作时，公司会有自己的代码仓库。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("github 官网"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://git.oschina.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("开源中国-git"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". github免费，代码所有人都能看到，但是只有你自己能修改。付费的可以隐藏。\n")])])]),a("p",[t._v("在 github 上创建一个项目，获取到仓库的地址。然后就可以将本地的代码推送到远程的服务器上。")]),t._v(" "),a("h2",{attrs:{id:"ssh-免密码登陆"}},[t._v("SSH 免密码登陆")]),t._v(" "),a("p",[t._v("git 支持多种数据传输协议：")]),t._v(" "),a("ul",[a("li",[t._v("https 协议："),a("code",[t._v("https://github.com/hucongcong/jquery.git")])]),t._v(" "),a("li",[t._v("ssh 协议："),a("code",[t._v("git@github.com:hucongcong/jquery.git")])])]),t._v(" "),a("p",[t._v("每次 push 或者 pull 代码，如果使用 https 协议，那么都需要输入用户名和密码进行身份的确认，非常麻烦。")]),t._v(" "),a("ul",[a("li",[t._v("github 为了账户的安全，需要对每一次 push 请求都要验证用户的身份，只有合法的用户才可以 push")]),t._v(" "),a("li",[t._v("使用 ssh 协议，配置 ssh 免密码，可以做到免密码往 github 推送代码")])]),t._v(" "),a("h3",{attrs:{id:"ssh-免密码登录配置"}},[t._v("SSH 免密码登录配置")]),t._v(" "),a("p",[t._v("注意：这些命令需要在 bash 中敲")]),t._v(" "),a("ul",[a("li",[t._v("1 创建 SSH Key："),a("code",[t._v("ssh-keygen -t rsa")])]),t._v(" "),a("li",[t._v("2 在文件路径  "),a("code",[t._v("C:\\用户\\当前用户名\\")]),t._v("  找到  "),a("code",[t._v(".ssh")]),t._v("  文件夹")]),t._v(" "),a("li",[t._v("3 文件夹中有两个文件：\n"),a("ul",[a("li",[t._v("私钥："),a("code",[t._v("id_rsa")])]),t._v(" "),a("li",[t._v("公钥："),a("code",[t._v("id_rsa.pub")])])])]),t._v(" "),a("li",[t._v("4 在  "),a("code",[t._v("github -> settings -> SSH and GPG keys")]),t._v("页面中，新创建 SSH key")]),t._v(" "),a("li",[t._v("5 粘贴 公钥  "),a("code",[t._v("id_rsa.pub")]),t._v("  内容到对应文本框中")]),t._v(" "),a("li",[t._v("5 在 github 中新建仓库或者使用现在仓库，拿到"),a("code",[t._v("git@github.com:用户名/仓库名.git")])]),t._v(" "),a("li",[t._v("6 此后，再次 SSH 方式与 github“通信”，不用输入密码确认身份了")])]),t._v(" "),a("h2",{attrs:{id:"github-pages-介绍"}},[t._v("github pages 介绍")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://pages.github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub Pages "),a("OutboundLink")],1),t._v("本用于介绍托管在 GitHub 的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。")]),t._v(" "),a("p",[t._v("缺点：只能放静态页面，也就说 github pages 只能解析 html、css、js，无法解析后端语言。")]),t._v(" "),a("p",[t._v("[用户名.github.io] 将来访问路径")]),t._v(" "),a("p",[t._v("博客搭建步骤：")]),t._v(" "),a("ol",[a("li",[t._v("在本地工作目录使用 git 初始化 "),a("code",[t._v("git init")])]),t._v(" "),a("li",[t._v("创建自己的博客项目")]),t._v(" "),a("li",[t._v("将创建好的博客添加到暂存区 "),a("code",[t._v("git add [文件路径]")])]),t._v(" "),a("li",[t._v("本地提交： "),a("code",[t._v('git commit -m "第一个博客"')])]),t._v(" "),a("li",[t._v("在 github 上创建一个项目，项目名"),a("code",[t._v("用户名.github.io")]),t._v(" 固定的")]),t._v(" "),a("li",[t._v("提交到 github："),a("code",[t._v("git push github仓库地址 master")])]),t._v(" "),a("li",[t._v("查看 github 中对应的仓库中，是不是提交到了")]),t._v(" "),a("li",[t._v("访问：用户名.github.io")])]),t._v(" "),a("h2",{attrs:{id:"hexo-创建博客（了解）"}},[t._v("hexo 创建博客（了解）")]),t._v(" "),a("h3",{attrs:{id:"安装步骤"}},[t._v("安装步骤")]),t._v(" "),a("ul",[a("li",[t._v("修改 npm 镜像地址")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" registry https://registry.npm.taobao.org --global\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" disturl https://npm.taobao.org/dist --global\n")])])]),a("ul",[a("li",[t._v("安装 hexo")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g hexo\n\nhexo -v  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看hexo的版本信息")]),t._v("\n")])])]),a("ul",[a("li",[t._v("初始化博客")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个目录  blog")]),t._v("\nhexo init  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化")]),t._v("\n")])])]),a("ul",[a("li",[t._v("生成静态页面")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("hexo generate   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成静态页面")]),t._v("\nhexo g          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成静态页面（简写）")]),t._v("\n")])])]),a("ul",[a("li",[t._v("启动服务")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("hexo server   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动服务")]),t._v("\nhexo s        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动服务(简写)")]),t._v("\n")])])]),a("ul",[a("li",[t._v("访问站点")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("http://localhost:4000/  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 通过这个地址就可以访问了")]),t._v("\n")])])]),a("h3",{attrs:{id:"hexo-常见命令"}},[t._v("hexo 常见命令")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("hexo n '博客标题'")]),t._v("创建一篇新的博客")]),t._v(" "),a("li",[a("code",[t._v("hexo g")]),t._v(" 生成博客")]),t._v(" "),a("li",[a("code",[t._v("hexo d")]),t._v(" 发布博客")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://hexo.io/zh-cn/docs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("hexo 中文文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"http://theme-next.iissnan.com/getting-started.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("hexo next 主题文档"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"博客格式"}},[t._v("博客格式")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\ntitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 我的第一篇博客"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//(注意冒号后面有一个空格不能丢。)")]),t._v("\ndate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2017")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("01")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指定博客的日期")]),t._v("\ntags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 学习\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 随笔\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 心情\ncategories"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" javascript\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n# 我是大标题\n这后面的内容就跟普通的markdown文件没什么区别\n")])])]),a("h3",{attrs:{id:"发布配置"}},[t._v("发布配置")]),t._v(" "),a("p",[t._v("安装 hexo 的部署工具"),a("code",[t._v("npm install hexo-deployer-git --save")])]),t._v(" "),a("p",[t._v("修改"),a("code",[t._v("_config.yml")]),t._v("文件")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("# Site\ntitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 网站标题\nsubtitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 子标题\ndescription"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 无\nauthor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HUCC")]),t._v("\nlanguage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" zh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CN")]),t._v("\ntimezone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n# 发布配置\ndeploy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" git\n  repo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" github仓库地址\n  branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" master\n")])])]),a("p",[t._v("使用"),a("code",[t._v("hexo d")]),t._v("发布博客")]),t._v(" "),a("h2",{attrs:{id:"git-clone命令直接使用用户名密码clone"}},[t._v("Git Clone命令直接使用用户名密码Clone")]),t._v(" "),a("p",[t._v("Git Clone命令,大家都知道这个是克隆项目的.\n当我们在服务器部署测试的时候,每次更新都需要输入账户和密码来确认,这样很麻烦,有没有一次性解决的办法呢?有!\n在使用git clone 命令的时候我们可以将用户名和密码嵌入到链接,\n代码格式如下:\ngit clone http://userName:password@链接")]),t._v(" "),a("p",[t._v("示例:\ngit clone https://username:password@git.oschina.net/wdm/familycloud.git")]),t._v(" "),a("h2",{attrs:{id:"stash-暂时隐藏"}},[t._v("stash 暂时隐藏")]),t._v(" "),a("p",[t._v("git stash // 可以暂时隐藏工作区未上传的文件")]),t._v(" "),a("p",[t._v("git stash list //查看所有的暂时隐藏")]),t._v(" "),a("p",[t._v("git stash apply // 恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除\ngit stash pop // 恢复的同时把stash内容也删除了。")])])}),[],!1,null,null,null);s.default=n.exports}}]);