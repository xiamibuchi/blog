(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{398:function(e,t,n){"use strict";n.r(t);var a=n(9),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"keep-alive"}},[e._v("keep-alive")]),e._v(" "),n("h2",{attrs:{id:"简介"}},[e._v("简介")]),e._v(" "),n("p",[n("code",[e._v("keep-alive")]),e._v(" 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。\n用法也很简单：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<keep-alive>\n  <component>\n    \x3c!-- 该组件将被缓存！ --\x3e\n  </component>\n</keep-alive>\n")])])]),n("h4",{attrs:{id:"props"}},[e._v("props")]),e._v(" "),n("ul",[n("li",[e._v("include - 字符串或正则表达，只有匹配的组件会被缓存")]),e._v(" "),n("li",[e._v("exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 组件 a\nexport default {\n  name: \'a\',\n  data () {\n    return {}\n  }\n}\n<keep-alive include="a">\n  <component>\n    \x3c!-- name 为 a 的组件将被缓存！ --\x3e\n  </component>\n</keep-alive>可以保留它的状态或避免重新渲染\n<keep-alive exclude="a">\n  <component>\n    \x3c!-- 除了 name 为 a 的组件都将被缓存！ --\x3e\n  </component>\n</keep-alive>可以保留它的状态或避免重新渲染\n')])])]),n("h2",{attrs:{id:"遇见-vue-router"}},[e._v("遇见 vue-router")]),e._v(" "),n("p",[e._v("西湖雨好大，借把伞躲躲雨...\n"),n("code",[e._v("router-view")]),e._v(" 也是一个组件，如果直接被包在 "),n("code",[e._v("keep-alive")]),e._v(" 里面，所有路径匹配到的视图组件都会被缓存：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<keep-alive>\n    <router-view>\n        \x3c!-- 所有路径匹配到的视图组件都会被缓存！ --\x3e\n    </router-view>\n</keep-alive>\n")])])]),n("p",[e._v("然而产品汪总是要改需求，拦都拦不住...")]),e._v(" "),n("h2",{attrs:{id:"问题"}},[e._v("问题")]),e._v(" "),n("p",[e._v("如果只想 "),n("code",[e._v("router-view")]),e._v(" 里面某个组件被缓存，怎么办？")]),e._v(" "),n("ul",[n("li",[e._v("使用 include/exclude")]),e._v(" "),n("li",[e._v("增加 router.meta 属性")])]),e._v(" "),n("h4",{attrs:{id:"使用-include-exclude"}},[e._v("使用 include/exclude")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 组件 a\nexport default {\n  name: 'a',\n  data () {\n    return {}\n  }\n}\n<keep-alive include=\"a\">\n    <router-view>\n        \x3c!-- 只有路径匹配到的视图 a 组件会被缓存！ --\x3e\n    </router-view>\n</keep-alive>\n")])])]),n("p",[n("code",[e._v("exclude")]),e._v(" 例子类似。")]),e._v(" "),n("blockquote",[n("p",[e._v("缺点：需要知道组件的 name，项目复杂的时候不是很好的选择")])]),e._v(" "),n("h4",{attrs:{id:"增加-router-meta-属性"}},[e._v("增加 router.meta 属性")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// routes 配置\nexport default [\n  {\n    path: '/',\n    name: 'home',\n    component: Home,\n    meta: {\n      keepAlive: true // 需要被缓存\n    }\n  }, {\n    path: '/:id',\n    name: 'edit',\n    component: Edit,\n    meta: {\n      keepAlive: false // 不需要被缓存\n    }\n  }\n]\n<keep-alive>\n    <router-view v-if=\"$route.meta.keepAlive\">\n        \x3c!-- 这里是会被缓存的视图组件，比如 Home！ --\x3e\n    </router-view>\n</keep-alive>\n\n<router-view v-if=\"!$route.meta.keepAlive\">\n    \x3c!-- 这里是不被缓存的视图组件，比如 Edit！ --\x3e\n</router-view>\n")])])]),n("blockquote",[n("p",[e._v("优点：不需要例举出需要被缓存组件名称")])]),e._v(" "),n("h4",{attrs:{id:"【加盐】使用-router-meta-拓展"}},[e._v("【加盐】使用 router.meta 拓展")]),e._v(" "),n("p",[e._v("假设这里有 3 个路由： A、B、C。")]),e._v(" "),n("ul",[n("li",[e._v("需求：\n"),n("ul",[n("li",[e._v("默认显示 A")]),e._v(" "),n("li",[e._v("B 跳到 A，A 不刷新")]),e._v(" "),n("li",[e._v("C 跳到 A，A 刷新")])])]),e._v(" "),n("li",[e._v("实现方式\n"),n("ul",[n("li",[e._v("在 A 路由里面设置 "),n("em",[e._v("meta")]),e._v(" 属性：")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n        path: '/',\n        name: 'A',\n        component: A,\n        meta: {\n            keepAlive: true // 需要被缓存\n        }\n}\n")])])]),n("ul",[n("li",[e._v("在 B 组件里面设置 "),n("em",[e._v("beforeRouteLeave")]),e._v("：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export default {\n        data() {\n            return {};\n        },\n        methods: {},\n        beforeRouteLeave(to, from, next) {\n             // 设置下一个路由的 meta\n            to.meta.keepAlive = true;  // 让 A 缓存，即不刷新\n            next();\n        }\n};\n")])])]),n("ul",[n("li",[e._v("在 C 组件里面设置 "),n("em",[e._v("beforeRouteLeave")]),e._v("：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export default {\n        data() {\n            return {};\n        },\n        methods: {},\n        beforeRouteLeave(to, from, next) {\n            // 设置下一个路由的 meta\n            to.meta.keepAlive = false; // 让 A 不缓存，即刷新\n            next();\n        }\n};\n")])])]),n("p",[e._v("这样便能实现 B 回到 A，A 不刷新；而 C 回到 A 则刷新。")])])}),[],!1,null,null,null);t.default=v.exports}}]);