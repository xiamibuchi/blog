(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{385:function(t,n,a){"use strict";a.r(n);var s=a(9),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"http"}},[t._v("http")]),t._v(" "),a("h2",{attrs:{id:"http-2"}},[t._v("HTTP")]),t._v(" "),a("p",[t._v("超文本传输协议，是一个基于请求与响应，无状态的，是一个基于TCP/IP实现的应用层协议")]),t._v(" "),a("p",[t._v("TCP: Transmission Control Protocol 传输控制协议，负责应用软件（比如你的浏览器）和网络软件之间的通信\nIP: Internet Protocol 网际协议，计算机用来相互识别的通信的一种机制")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("版本")])]),t._v(" "),a("th",[a("strong",[t._v("产生时间")])]),t._v(" "),a("th",[a("strong",[t._v("内容")])]),t._v(" "),a("th",[a("strong",[t._v("发展现状")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("HTTP/0.9")]),t._v(" "),a("td",[t._v("1991年")]),t._v(" "),a("td",[t._v("不涉及数据包传输，规定客户端和服务器之间通信格式，只能GET请求")]),t._v(" "),a("td",[t._v("没有作为正式的标准")])]),t._v(" "),a("tr",[a("td",[t._v("HTTP/1.0")]),t._v(" "),a("td",[t._v("1996年")]),t._v(" "),a("td",[t._v("传输内容格式不限制，增加PUT、PATCH、HEAD、 OPTIONS、DELETE命令")]),t._v(" "),a("td",[t._v("正式作为标准")])]),t._v(" "),a("tr",[a("td",[t._v("HTTP/1.1")]),t._v(" "),a("td",[t._v("1997年")]),t._v(" "),a("td",[t._v("持久连接(长连接)、节约带宽、HOST域、管道机制、分块传输编码")]),t._v(" "),a("td",[t._v("2015年前使用最广泛")])]),t._v(" "),a("tr",[a("td",[t._v("HTTP/2")]),t._v(" "),a("td",[t._v("2015年")]),t._v(" "),a("td",[t._v("多路复用（通过单一的HTTP/2连接请求发起多重的请求-响应消息，多个请求stream共享一个TCP连接，实现多留并行而不是依赖建立多个TCP连接）、服务器推送、头信息压缩、二进制协议等")]),t._v(" "),a("td",[t._v("逐渐覆盖市场")])])])]),t._v(" "),a("p",[t._v("请求：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("请求方法 URL HTTP/版本号\n请求首部字段(可选)\n空行\nbody\n")])])]),a("p",[t._v("响应：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("HTTP/版本号 返回码 返回码描述\n应答首部字段(可选)\n空行\nbody\n")])])]),a("h3",{attrs:{id:"url"}},[t._v("URL")]),t._v(" "),a("p",[t._v("使用HTTP协议访问资源是通过URL（Uniform Resource Locator）统一资源定位符来实现的。URL的格式如下：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("scheme://host:port/path?query\n\nscheme: 表示协议，如Http, Https, Ftp等；\nhost: 表示所访问资源所在的主机名：如：www.abc.com;\nport: 表示端口号，默认为80；\npath: 表示所访问的资源在目标主机上的储存路径；\nquery: 表示查询条件；\n\n例如： http://www.abc.com/search?words=abc\n")])])]),a("h3",{attrs:{id:"报文字段"}},[t._v("报文字段")]),t._v(" "),a("p",[t._v("HTTP的报文字段分为5种：")]),t._v(" "),a("ul",[a("li",[t._v("请求报文字段")]),t._v(" "),a("li",[t._v("应答报文字段")]),t._v(" "),a("li",[t._v("实体首部字段")]),t._v(" "),a("li",[t._v("通用报文字段")]),t._v(" "),a("li",[t._v("其他报文字段")])]),t._v(" "),a("h4",{attrs:{id:"请求报文字段"}},[t._v("请求报文字段")]),t._v(" "),a("p",[t._v("HTTP请求中支持的报文字段。")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Accept：客户端能够处理的媒体类型。如text/html, 表示客户端让服务器返回html类型的数据，如果没有，返回text\n类型的也可以。媒体类型的格式一般为：type/subType, 表示优先请求subType类型的数据，如果没有，返回type类型\n数据也可以。\n\n常见的媒体类型：\n文本文件：text/html, text/plain, text/css, application/xml\n图片文件：iamge/jpeg, image/gif, image/png;\n视频文件：video/mpeg\n应用程序使用的二进制文件：application/octet-stream, application/zip\n\nAccept字段可设置多个字段值，这样服务器依次进行匹配，并返回最先匹配到的媒体类型，当然，也可通过q参数来设置\n媒体类型的权重，权重越高，优先级越高。q的取值为[0, 1], 可取小数点后3位，默认为1.0。例如：\nAccept: text/html, application/xml; q=0.9, */*\n\nAccept-Charset: 表示客户端支持的字符集。例如：Accept-Charset: GB2312, ISO-8859-1\n\nAccept-Encoding： 表示客户端支持的内容编码格式。如：Accept-Encoding：gzip\n\n常用的内容编码：\ngzip: 由文件压缩程序gzip生成的编码格式；\ncompress: 由Unix文件压缩程序compress生成的编码格式；\ndeflate: 组合使用zlib和deflate压缩算法生成的编码格式；\nidentity：默认的编码格式，不执行压缩。\n\nAccept-Language：表示客户端支持的语言。如：Accept-Language: zh-cn, en\n\nAuthorization：表示客户端的认证信息。客户端在访问需要认证的也是时，服务器会返回401，随后客户端将认证信息\n加在Authorization字段中发送到服务器后，如果认证成功，则返回200. 如Linux公社下的Ftp服务器就是这种流程：\nftp://ftp1.linuxidc.com。\n\nHost: 表示访问资源所在的主机名，即URL中的域名部分。如：m.baidu.com\n\nIf-Match: If-Match的值与所请求资源的ETag值（实体标记，与资源相关联。资源变化，实体标记跟着变化）一致时，\n服务器才处理此请求。\n\nIf-Modified-Since: 用于确认客户端拥有的本地资源的时效性。 如果客户端请求的资源在If-Modified-Since指定\n的时间后发生了改变，则服务器处理该请求。如：If-Modified-Since:Thu 09 Jul 2018 00:00:00, 表示如果客户\n端请求的资源在2018年1月9号0点之后发生了变化，则服务器处理改请求。通过该字段我们可解决以下问题：有一个包含大\n量数据的接口，且实时性较高，我们在刷新时就可使用改字段，从而避免多余的流量消耗。\n\nIf-None-Match: If-Match的值与所请求资源的ETag值不一致时服务器才处理此请求。\n\nIf-Range： If-Range的值（ETag值或时间）与所访问资源的ETag值或时间相一致时，服务器处理此请求，并返回\nRange字段中设置的指定范围的数据。如果不一致，则返回所有内容。If-Range其实算是If-Match的升级版，因为它\n的值不匹配时，依然能够返回数据，而If-Match不匹配时，请求不会被处理，需要数据时需再次进行请求。\n\n\nIf-Unmodified-Since：与If-Modified-Since相反，表示请求的资源在指定的时间之后未发生变化时，才处理请求，\n否则返回412。\n\nMax-Forwards：表示请求可经过的服务器的最大数目，请求每被转发一次，Max-Forwards减1，当Max-Forwards为0\n时，所在的服务器将不再转发，而是直接做出应答。通过此字段可定位通信问题，比如之前支付宝光纤被挖断，就可通过设\n置Max-Forwards来定位大概的位置。\n\nProxy-Authorization：当客户端接收到来自代理服务器的认证质询时，客户端会将认证信息添加到\nProxy-Authorization来完成认证。与Authorization类似，只不过Authorization是发生在客户端与服务端之间。\n\nRange：获取部分资源，例如：Range: bytes=500-1000表示获取指定资源的第500到1000字节之间的内容，如果服务器\n能够正确处理，则返回206作为应答，表示返回了部分数据，如果不能处理这种范围请求，则以200作为应答，返回完整的\n数据，\n\nReferer：告知服务器请求是从哪个页面发起的。例如在百度首页中搜索某个关键字，结果页面的请求头部就会有这个字段，\n其值为https://www.baidu.com/。通过这个字段可统计广告的点击情况。\n\nUser-Agent：将发起请求的浏览器和代理名称等信息发送给服务端，例如：\nUser-Agent: Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36\n(KHTML, like Gecko) Chrome/63.0.3239.84 Mobile Safari/537.36\n复制代码\n")])])]),a("h4",{attrs:{id:"应答报文字段"}},[t._v("应答报文字段")]),t._v(" "),a("p",[t._v("HTTP应答中支持的报文字段。")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("表示不能处理。\n\nAge：服务端告知客户端，源服务器（而不是缓存服务器）在多久之前创建了响应。\n单位为秒。\n\nETag： 实体资源的标识，可用来请求指定的资源。\n\nLocation：请求的资源所在的新位置。\n\nProxy-Authenticate：将代理服务器需要的认证信息发送给客户端。\n\nRetry-After：服务端告知客户端多久之后再重试，一般与503和3xx重定向类型的应答一起使用。\n\nServer：告知服务端当前使用的HTTP服务器应用程序的相关信息。\n\nWWW-Authenticate：告知客户端适用于所访问资源的认证方案，如Basic或Digest。401的响应中肯定带有\nWWW-Authenticate字段。\n复制代码\n")])])]),a("h4",{attrs:{id:"实体首部字段"}},[t._v("实体首部字段")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Allow：通知客户端，服务器所支持的请求方法。但服务器收到不支持的请求方法时，会以405（Method Not Allowed）\n作为响应。\n\nContent-Encoding：告知客户端，服务器对资源的内容编码。\n  \nContent-Language：告知客户端，资源所使用的自然语言。\n  \nContent-Length：告知客户端资源的长度\n  \nContent-Location：告知客户端资源所在的位置。\n  \nContent-Type：告知客户端资源的媒体类型，取值同请求首部字段中的Accept。\n  \nExpires：告知客户端资源的失效日期。可用于对缓存的处理。\n  \nLast-Modified：告知客户端资源最后一次修改的时间。\n复制代码\n")])])]),a("h4",{attrs:{id:"通用报文字段"}},[t._v("通用报文字段")]),t._v(" "),a("p",[t._v("即可在HTTP请求中使用，也可在HTTP应答中使用的报文字段。")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Cache-Control：控制缓存行为；\n\nConnection：管理持久连接，设置其值为Keep-Alive可实现长连接。\n\nDate：创建HTTP报文的日期和时间。\n\nPragma：Http/1.1之前的历史遗留字段，仅作为HTTP/1.0向后兼容而定义，虽然是通用字段，当通常被使用在客户单的\n请求中，如Pragma: no-cache, 表示客户端在请求过程中不循序服务端返回缓存的数据；\n\nTransfer-Encoding：规定了传输报文主题时使用的传输编码，如Transfer-Encoding: chunked\n\nUpgrade: 用于检查HTTP协议或其他协议是否有可使用的更高版本。\n\nVia：追踪客户端和服务端之间的报文的传输路径，还可避免会环的发生，所以在经过代理时必须添加此字段。\n\nWarning：Http/1.1的报文字段，从Http/1.0的AfterRetry演变而来，用来告知用户一些与缓存相关的警告信息。\n复制代码\n")])])]),a("h4",{attrs:{id:"其他报文字段"}},[t._v("其他报文字段")]),t._v(" "),a("p",[t._v("这些字段不是HTTP协议中定义的，但被广泛应用于HTTP请求中。")]),t._v(" "),a("ul",[a("li",[t._v("Cookie：属于请求型报文字段，在请求时添加Cookie, 以实现HTTP的状态记录。")]),t._v(" "),a("li",[t._v("Set-Cookie：属于应答型报文字段。服务器给客户端传递Cookie信息时，就是通过此字段实现的。")])]),t._v(" "),a("p",[t._v("Set-Cookie的字段属性：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("NAME=VALUE：赋予Cookie的名称和值；\nexpires=DATE: Cookie的有效期；\npath=PATH: 将服务器上的目录作为Cookie的适用对象，若不指定，则默认为文档所在的文件目录；\ndomin=域名：作为Cookies适用对象的域名，若不指定，则默认为创建Cookie的服务器域名；\nSecure: 仅在HTTPS安全通信是才会发送Cookie；\nHttpOnly: 使Cookie不能被JS脚本访问；\n\n如：Set-Cookie:BDSVRBFE=Go; max-age=10; domain=m.baidu.com; path=/\n")])])]),a("h3",{attrs:{id:"特点"}},[t._v("特点")]),t._v(" "),a("ul",[a("li",[t._v("无状态：协议对客户端没有状态存储，对事物处理没有“记忆”能力，比如访问一个网站需要反复进行登录操作")]),t._v(" "),a("li",[t._v("无连接：HTTP/1.1之前，由于无状态特点，每次请求需要通过TCP三次握手四次挥手，和服务器重新建立连接。比如某个客户机在短时间多次请求同一个资源，服务器并不能区别是否已经响应过用户的请求，所以每次需要重新响应请求，需要耗费不必要的时间和流量。")]),t._v(" "),a("li",[t._v("基于请求和响应：基本的特性，由客户端发起请求，服务端响应")]),t._v(" "),a("li",[t._v("简单快速、灵活")]),t._v(" "),a("li",[t._v("通信使用明文、请求和响应不会对通信方进行确认、无法保护数据的完整性")])]),t._v(" "),a("h3",{attrs:{id:"缺点"}},[t._v("缺点")]),t._v(" "),a("ul",[a("li",[t._v("通信使用明文，可能被窃听")]),t._v(" "),a("li",[t._v("不验证通信方的身份，可能遭遇伪装")]),t._v(" "),a("li",[t._v("无法证明报文的完整性，有可能遭遇篡改")])]),t._v(" "),a("h2",{attrs:{id:"https"}},[t._v("HTTPS")]),t._v(" "),a("p",[t._v("HTTP是明文传输的，这就意味着介于发送端和接收端之间的任意节点都可以知道传输的内容是什么，这些节点可以是路由器、代理等")]),t._v(" "),a("p",[t._v("HTTPS，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。HTTPS比HTTP多了一层TLS/SSL协议")]),t._v(" "),a("p",[t._v("TLS（传输层安全）跟SSL（安全套接字）可以理解成类似的东西，可以将SSL理解成负责对HTTP的数据进行加密的加密套件，而TLS是SSL的升级版/继任者。")]),t._v(" "),a("p",[t._v("TLS的基本工作方式是，客户端使用非对称加密与服务器进行通信，实现身份验证并协商对称加密使用的密钥， 然后对称加密算法采用协商密钥对信息以及信息摘要进行加密通信，不同的节点之间采用的对称密钥不同，从而可以保证信息只能通信双方获取。")]),t._v(" "),a("h3",{attrs:{id:"身份验证ca和证书"}},[t._v("身份验证CA和证书")]),t._v(" "),a("p",[t._v('解决身份验证问题的关键是确保获取的公钥途径是合法的，能够验证服务器的身份信息，为此需要引入权威的第三方机构CA(如沃通CA)。CA 负责核实公钥的拥有者的信息，并颁发认证"证书"，同时能够为使用者提供证书验证服务，即PKI体系(PKI基础知识)。\n基本的原理为，CA负责审核信息，然后对关键信息利用私钥进行"签名"，公开对应的公钥，客户端可以利用公钥验证签名。')]),t._v(" "),a("h3",{attrs:{id:"特点-2"}},[t._v("特点")]),t._v(" "),a("ul",[a("li",[t._v("内容加密：采用混合加密技术，中间者无法直接查看明文内容")]),t._v(" "),a("li",[t._v("验证身份：通过证书认证客户端访问的是自己的服务器")]),t._v(" "),a("li",[t._v("保护数据完整性：防止传输的内容被中间人冒充或者篡改")])]),t._v(" "),a("p",[t._v("**混合加密：**结合非对称加密和对称加密技术。客户端使用对称加密生成密钥对传输数据进行加密，然后使用非对称加密的公钥再对秘钥进行加密，所以网络上传输的数据是被秘钥加密的密文和用公钥加密后的秘密秘钥，因此即使被黑客截取，由于没有私钥，无法获取到加密明文的秘钥，便无法获取到明文数据。")]),t._v(" "),a("p",[t._v("**数字摘要：**通过单向hash函数对原文进行哈希，将需加密的明文“摘要”成一串固定长度(如128bit)的密文，不同的明文摘要成的密文其结果总是不相同，同样的明文其摘要必定一致，并且即使知道了摘要也不能反推出明文。")]),t._v(" "),a("p",[t._v("**数字签名技术：**数字签名建立在公钥加密体制基础上，是公钥加密技术的另一类应用。它把公钥加密技术和数字摘要结合起来，形成了实用的数字签名技术。")]),t._v(" "),a("blockquote",[a("p",[t._v("非对称加密过程需要用到公钥进行加密，那么公钥从何而来？其实公钥就被包含在数字证书中，数字证书通常来说是由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，证书中包含了一个密钥对（公钥和私钥）和所有者识别信息。数字证书被放到服务端，具有服务器身份验证和数据传输加密功能。")])]),t._v(" "),a("h3",{attrs:{id:"缺点-2"}},[t._v("缺点")]),t._v(" "),a("ul",[a("li",[t._v("SSL证书需要购买申请，功能越强大的证书费用越高")]),t._v(" "),a("li",[t._v("SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗（SSL有扩展可以部分解决这个问题，但是比较麻烦，而且要求浏览器、操作系统支持，Windows XP就不支持这个扩展，考虑到XP的装机量，这个特性几乎没用）。")]),t._v(" "),a("li",[t._v("根据ACM CoNEXT数据显示，使用HTTPS协议会使页面的加载时间延长近50%，增加10%到20%的耗电。")]),t._v(" "),a("li",[t._v("HTTPS连接缓存不如HTTP高效，流量成本高。")]),t._v(" "),a("li",[t._v("HTTPS连接服务器端资源占用高很多，支持访客多的网站需要投入更大的成本。")]),t._v(" "),a("li",[t._v("HTTPS协议握手阶段比较费时，对网站的响应速度有影响，影响用户体验。比较好的方式是采用分而治之，类似12306网站的主页使用HTTP协议，有关于用户信息等方面使用HTTPS。")])]),t._v(" "),a("h2",{attrs:{id:"ajax"}},[t._v("ajax")]),t._v(" "),a("p",[t._v("Asynchronous [e'sɪŋkrənəs] Javascript And XML， AJAX 不是一门的新的语言，而是对现有技术的综合利用。 本质是在 HTTP 协议的基础上以异步的方式与服务器进行通信。")]),t._v(" "),a("h3",{attrs:{id:"xmlhttprequest-对象"}},[t._v("XMLHttpRequest 对象")]),t._v(" "),a("p",[t._v("浏览器内建对象，用于与服务器通信(交换数据)")]),t._v(" "),a("h3",{attrs:{id:"get-和-post-请求的区别"}},[t._v("GET 和 POST 请求的区别")]),t._v(" "),a("ol",[a("li",[t._v("HTTP没有要求，如果Method是POST数据就要放在BODY中。也没有要求，如果Method是GET，数据（参数）就一定要放在URL中而不能放在BODY中。但在浏览器中，GET 提交的数据会放在 URL 之后，POST 是把提交的数据放在 HTTP 消息的 Body 中")]),t._v(" "),a("li",[t._v("HTTP 协议从未规定过GET/POST请求长度是多少，GET 提交的数据大小有限制是某些浏览器或服务器对 URL 的长度有限制，而 POST 方法提交的数据没有限制")]),t._v(" "),a("li",[t._v("多数浏览器对于POST采用两阶段发送数据的")]),t._v(" "),a("li",[t._v("GET 方式请求的数据会被浏览器缓存起来")]),t._v(" "),a("li",[t._v("GET 幂等，而 POST 请求不是")])]),t._v(" "),a("blockquote",[a("p",[t._v("幂等性是指一次和多次请求某一个资源应该具有同样的副作用。简单来说意味着对同一URL的多个请求应该返回同样的结果。")])]),t._v(" "),a("h3",{attrs:{id:"跨域"}},[t._v("跨域")]),t._v(" "),a("p",[t._v("浏览器的同源策略限制，浏览器会拒绝跨域请求")]),t._v(" "),a("h4",{attrs:{id:"简单请求和非简单请求"}},[t._v("简单请求和非简单请求")]),t._v(" "),a("p",[t._v("简单请求：使用下列方法之一且没有人为设置对 CORS 安全的首部字段集合之外的其他首部字段：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GET\nHEAD\nPOST- 仅当POST方法的Content-Type值等于下列之一才算作简单请求\n - text/plain\n - multipart/form-data\n - application/x-www-form-urlencoded\n")])])]),a("h4",{attrs:{id:"jsonp"}},[t._v("JSONP")]),t._v(" "),a("p",[t._v("利用资源请求标签（script）可引入不同域上的js脚本，在js文件载入完毕之后，触发回调")]),t._v(" "),a("p",[t._v("优点：兼容性好（兼容低版本IE）\n缺点：1.JSONP只支持GET请求； 2.错误处理机制缺失")]),t._v(" "),a("h4",{attrs:{id:"cors"}},[t._v("CORS")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Access-Control-Allow-Origin: foo.example    // 标识可接受的跨域请求源；  Access-Control-Allow-Methods: POST, GET, OPTIONS   //标识可接受的跨域请求方法,如GET、POST、OPTIONS；  Access-Control-Allow-Headers: X-PINGOTHER, Content-Type //标识可接受的跨域请求自定义头；  Access-Control-Max-Age: 86400。 //标识本次预请求的有效时间（秒），期间内无需再发送预请求；\n")])])]),a("h4",{attrs:{id:"postmessage"}},[t._v("postMessage")]),t._v(" "),a("p",[t._v("window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" channel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MessageChannel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" output "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.output'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" iframe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'iframe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Wait for the iframe to load")]),t._v("\niframe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"load"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" onLoad"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onLoad")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Listen for messages on port1")]),t._v("\n  channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onmessage "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" onMessage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Transfer port2 to the iframe")]),t._v("\n  iframe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("contentWindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello from the main page!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("channel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Handle messages received on port1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"fetch"}},[t._v("fetch")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("response")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// handle HTTP response")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// handle network error")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("说明：")]),t._v(" "),a("ol",[a("li",[t._v("fetch api 返回的是一个 promise 对象")]),t._v(" "),a("li",[t._v("Options:\n"),a("ul",[a("li",[t._v("method(String): HTTP 请求方法，默认为 GET")]),t._v(" "),a("li",[t._v("body(String): HTTP 的请求参数")]),t._v(" "),a("li",[t._v("headers(Object): HTTP 的请求头，默认为{}")]),t._v(" "),a("li",[t._v("credentials(String): 默认为 omit,忽略的意思，也就是不带 cookie;还有两个参数，same-origin，意思就是同源请求带 cookie；include,表示无论跨域还是同源请求都会带 cookie")])])]),t._v(" "),a("li",[t._v("第一个 then 函数里面处理的是 response 的格式\n"),a("ul",[a("li",[t._v("status(number): HTTP 返回的状态码，范围在 100-599 之间\nstatusText(String): 服务器返回的状态文字描述，例如 Unauthorized,上图中返回的是 Ok\nok(Boolean): 如果状态码是以 2 开头的，则为 true\nheaders: HTTP 请求返回头\nbody: 返回体，这里有处理返回体的一些方法\ntext(): 将返回体处理成字符串类型\njson()： 返回结果和 JSON.parse(responseText)一样\nblob()： 返回一个 Blob，Blob 对象是一个不可更改的类文件的二进制数据\narrayBuffer()\nformData()")])])])]),t._v(" "),a("h3",{attrs:{id:"问题"}},[t._v("问题")]),t._v(" "),a("ol",[a("li",[t._v("兼容性\nIE 浏览器完全不支持 fetch，移动端的很多浏览器也不支持,所以，如果要在这些浏览器上使用 Fetch，就必须使用 fetch polyfill")]),t._v(" "),a("li",[t._v("cookie 传递\n必须在 header 参数里面加上 credientials: 'include'，才会如 xhr 一样将当前 cookies 带到请求中去")]),t._v(" "),a("li",[t._v("fetch 和 xhr 的不同\nfetch 虽然底层，但是还是缺少一些常用 xhr 有的方法，比如能够取消请求（abort）方法。fetch 在服务器返回 4xx、5xx 时是不会抛出错误的，这里需要手动通过，通过 response 中的 ok 字段和 status 字段来判断")])]),t._v(" "),a("h2",{attrs:{id:"json"}},[t._v("JSON")]),t._v(" "),a("p",[t._v("JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript 规范，采用独立于编程语言的文本格式来存储和表示数据。")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("数据在 键值对 中")]),t._v(" "),a("li",[t._v("数据由逗号分隔(最后一个 键值对 不能带逗号)")]),t._v(" "),a("li",[t._v("花括号保存对象，方括号保存数组")]),t._v(" "),a("li",[t._v("键使用双引号")]),t._v(" "),a("li",[t._v("JSON 内部常用数据类型无非就是字符串、数字、布尔、日期、null 这么几个，字符串必须用双引号引起来，其余的都不用")])]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ol",[a("li",[t._v("基于纯文本，跨平台传递极其简单；")]),t._v(" "),a("li",[t._v("Javascript 原生支持，后台语言几乎全部支持；")]),t._v(" "),a("li",[t._v("轻量级数据格式，占用字符数量极少，特别适合互联网传递；")]),t._v(" "),a("li",[t._v("可读性较强，虽然比不上 XML 那么一目了然，但在合理的依次缩进之后还是很容易识别的；")]),t._v(" "),a("li",[t._v("容易编写和解析，当然前提是你要知道数据结构；")])]),t._v(" "),a("h2",{attrs:{id:"xml"}},[t._v("XML")]),t._v(" "),a("ul",[a("li",[t._v("XML 指可扩展标记语言（EXtensible Markup Language）")]),t._v(" "),a("li",[t._v("XML 是一种标记语言，很类似 HTML")]),t._v(" "),a("li",[t._v("XML 的设计宗旨是传输数据，而非显示数据")]),t._v(" "),a("li",[t._v("XML 标签没有被预定义。您需要自行定义标签。")])]),t._v(" "),a("p",[t._v("AJAX 可用来与 XML 文件进行交互式通信。")]),t._v(" "),a("p",[t._v('loadXMLDoc() 函数创建 XMLHttpRequest 对象，添加当服务器响应就绪时执行的函数，并将请求发送到服务器。\n当服务器响应就绪时，会构建一个 HTML 表格，从 XML 文件中提取节点（元素），最后使用 XML 数据的 填充 id="demo" 的表格元素：')]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadDoc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" xhttp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XMLHttpRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  xhttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onreadystatechange")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readyState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  xhttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GET"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cd_catalog.xml"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  xhttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("xml")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" xmlDoc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" xml"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("responseXML"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<tr><th>Artist</th><th>Title</th></tr>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" xmlDoc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByTagName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CD"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    table "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<tr><td>"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByTagName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ARTIST"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childNodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodeValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"</td><td>"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByTagName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TITLE"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childNodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodeValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"</td></tr>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"demo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"状态码"}},[t._v("状态码")]),t._v(" "),a("p",[t._v("补全状态码避免再去搜:\n100——客户必须继续发出请求\n101——客户要求服务器根据请求转换 HTTP 协议版本\n200——交易成功\n201——提示知道新文件的 URL\n202——接受和处理、但处理未完成\n203——返回信息不确定或不完整\n204——请求收到，但返回信息为空\n205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件\n206——服务器已经完成了部分用户的 GET 请求\n300——请求的资源可在多处得到\n301——删除请求数据\n302——在其他地址发现了请求数据\n303——建议客户访问其他 URL 或访问方式\n304——客户端已经执行了 GET，但文件未变化\n305——请求的资源必须从服务器指定的地址得到\n306——前一版本 HTTP 中使用的代码，现行版本中不再使用\n307——申明请求的资源临时性删除\n400——错误请求，如语法错误\n401——请求授权失败\n402——保留有效 ChargeTo 头响应\n403——请求不允许\n404——没有发现文件、查询或 URl\n405——用户在 Request-Line 字段定义的方法不允许\n406——根据用户发送的 Accept，请求资源不可访问\n407——类似 401，用户必须首先在代理服务器上得到授权\n408——客户端没有在用户指定的饿时间内完成请求\n409——对当前资源状态，请求不能完成\n410——服务器上不再有此资源且无进一步的参考地址\n411——服务器拒绝用户定义的 Content-Length 属性请求\n412——一个或多个请求头字段在当前请求中错误\n413——请求的资源大于服务器允许的大小\n414——请求的资源 URL 长于服务器允许的长度\n415——请求资源不支持请求项目格式\n416——请求中包含 Range 请求头字段，在当前请求资源范围内没有 range 指示值，请求也不包含 If-Range 请求头字段\n417——服务器不满足请求 Expect 头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求\n500——服务器产生内部错误\n501——服务器不支持请求的函数\n502——服务器暂时不可用，有时是为了防止发生系统过载\n503——服务器过载或暂停维修\n504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长\n505——服务器不支持或拒绝支请求头中指定的 HTTP 版本")])])}),[],!1,null,null,null);n.default=e.exports}}]);